import telebot
import traceback
import speech_recognition as sr
import subprocess
import os
import logging
from telebot import types
from pymongo import MongoClient
import requests
import g4f
from transformers import AutoTokenizer, AutoModelForTokenClassification
import torch
import json
from datetime import datetime
import random




genres_array = [
    {"id": 1, "genre": "—Ç—Ä–∏–ª–ª–µ—Ä"},
    {"id": 2, "genre": "–¥—Ä–∞–º–∞"},
    {"id": 3, "genre": "–∫—Ä–∏–º–∏–Ω–∞–ª"},
    {"id": 4, "genre": "–º–µ–ª–æ–¥—Ä–∞–º–∞"},
    {"id": 5, "genre": "–¥–µ—Ç–µ–∫—Ç–∏–≤"},
    {"id": 6, "genre": "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞"},
    {"id": 7, "genre": "–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è"},
    {"id": 8, "genre": "–±–∏–æ–≥—Ä–∞—Ñ–∏—è"},
    {"id": 9, "genre": "—Ñ–∏–ª—å–º-–Ω—É–∞—Ä"},
    {"id": 10, "genre": "–≤–µ—Å—Ç–µ—Ä–Ω"},
    {"id": 11, "genre": "–±–æ–µ–≤–∏–∫"},
    {"id": 12, "genre": "—Ñ—ç–Ω—Ç–µ–∑–∏"},
    {"id": 13, "genre": "–∫–æ–º–µ–¥–∏—è"},
    {"id": 14, "genre": "–≤–æ–µ–Ω–Ω—ã–π"},
    {"id": 15, "genre": "–∏—Å—Ç–æ—Ä–∏—è"},
    {"id": 16, "genre": "–º—É–∑—ã–∫–∞"},
    {"id": 17, "genre": "—É–∂–∞—Å—ã"},
    {"id": 18, "genre": "–º—É–ª—å—Ç—Ñ–∏–ª—å–º"},
    {"id": 19, "genre": "—Å–µ–º–µ–π–Ω—ã–π"},
    {"id": 20, "genre": "–º—é–∑–∏–∫–ª"},
    {"id": 21, "genre": "—Å–ø–æ—Ä—Ç"},
    {"id": 22, "genre": "–¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π"},
    {"id": 23, "genre": "–∫–æ—Ä–æ—Ç–∫–æ–º–µ—Ç—Ä–∞–∂–∫–∞"},
    {"id": 24, "genre": "–∞–Ω–∏–º–µ"},
    {"id": 26, "genre": "–Ω–æ–≤–æ—Å—Ç–∏"},
    {"id": 27, "genre": "–∫–æ–Ω—Ü–µ—Ä—Ç"},
    {"id": 28, "genre": "–¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö"},
    {"id": 29, "genre": "—Ü–µ—Ä–µ–º–æ–Ω–∏—è"},
    {"id": 30, "genre": "—Ä–µ–∞–ª—å–Ω–æ–µ –¢–í"},
    {"id": 31, "genre": "–∏–≥—Ä–∞"},
    {"id": 32, "genre": "—Ç–æ–∫-—à–æ—É"},
    {"id": 33, "genre": "–¥–µ—Ç—Å–∫–∏–π"},
]

def is_valid_json(my_json):
    try:
        json.loads(my_json)
        return True
    except ValueError:
        return False


FIND, ANSWER = range(2)


def format_duration(minutes):
    hours, remainder = divmod(minutes, 60)
    return f"{hours} —á–∞—Å–∞ {remainder} –º–∏–Ω—É—Ç—ã"

BOT_TOKEN = None

def read_bot_token():
    try:
        from config import BOT_TOKEN
    except ImportError:
        pass

    if not BOT_TOKEN:
        BOT_TOKEN = os.environ.get('YOUR_BOT_TOKEN')

    if BOT_TOKEN is None:
        raise ValueError('Token for the bot must be provided (BOT_TOKEN variable)')
    return BOT_TOKEN

BOT_TOKEN = read_bot_token()

r = sr.Recognizer()
bot = telebot.TeleBot(BOT_TOKEN)

mongo_client = MongoClient('mongodb://localhost:27017/')
db = mongo_client['telegramDB']
users_collection = db['users']

LOG_FOLDER = '.logs'
if not os.path.exists(LOG_FOLDER):
    os.makedirs(LOG_FOLDER)

logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename=f'{LOG_FOLDER}/app.log'
)

logger = logging.getLogger('telegram-bot')
logging.getLogger('urllib3.connectionpool').setLevel('INFO')

def find_conent(message):
    chat_id = message.chat.id
    content = message.text
    msg = None

    if(message.content_type == 'voice'):
        msg = bot.send_message(chat_id, 'üîç–û–π! –ì–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–∏—Å–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.ü§î')
        bot.register_next_step_handler(msg, find_conent)
        return

    if content.lower() != '—Å—Ç–æ–ø' and content.lower() != 'stop' and content.lower() != '/stop':
        movies = search_movies(content)

        if len(movies) == 0:
            msg = bot.send_message(chat_id, 'üîç–û–π! –ü–æ—Ö–æ–∂–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞.ü§î')
            bot.register_next_step_handler(msg, find_conent)
        else:
            send_movies_results(bot, chat_id, movies, '–Ω–∞–π–¥–∏', content, True)
    else:

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

        row2_buttons = [types.KeyboardButton("üîç –ù–∞–π—Ç–∏"), types.KeyboardButton("‚úîÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ"), types.KeyboardButton("‚è∞ –ù–∞ –ø–æ—Ç–æ–º")]
        markup.row(*row2_buttons)

        row3_buttons = [types.KeyboardButton("üì∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), types.KeyboardButton("üï∞Ô∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å"), types.KeyboardButton("‚Ñπ –ü–æ–º–æ—â—å")]
        markup.row(*row3_buttons)

        row4_buttons = [types.KeyboardButton("üó≥Ô∏è –ü–æ–¥–±–æ—Ä–∫–∏"), types.KeyboardButton("üí• –ü—Ä–µ–º—å–µ—Ä—ã"), types.KeyboardButton("ü•á –¢–æ–ø 10")]
        markup.row(*row4_buttons)

        bot.send_message(chat_id, '–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞, —Ç–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º', reply_markup=markup)


def findingHandler(message):
    chat_id = message.chat.id
    content = message.text
    msg = None

    print('finding')

    if content == 'üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞' or content == '/home':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

        row2_buttons = [types.KeyboardButton("üîç –ù–∞–π—Ç–∏"), types.KeyboardButton("‚úîÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ"), types.KeyboardButton("‚è∞ –ù–∞ –ø–æ—Ç–æ–º")]
        markup.row(*row2_buttons)

        row3_buttons = [types.KeyboardButton("üì∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), types.KeyboardButton("üï∞Ô∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å"), types.KeyboardButton("‚Ñπ –ü–æ–º–æ—â—å")]
        markup.row(*row3_buttons)

        row4_buttons = [types.KeyboardButton("üó≥Ô∏è –ü–æ–¥–±–æ—Ä–∫–∏"), types.KeyboardButton("üí• –ü—Ä–µ–º—å–µ—Ä—ã"), types.KeyboardButton("ü•á –¢–æ–ø 10")]
        markup.row(*row4_buttons)

        bot.send_message(chat_id, '''
–ü—Ä–∏–≤–µ—Ç! üåü –ì–æ—Ç–æ–≤ –∫ –∫–∏–Ω–æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º? üçø
–ù–∞–ø–∏—à–∏ –º–Ω–µ, —á—Ç–æ —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–µ–≥–æ–¥–Ω—è, –∏ –º—ã –Ω–∞–π–¥–µ–º –¥–ª—è —Ç–µ–±—è –∏–¥–µ–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç! üòä

–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É <b>–ù–∞–π—Ç–∏</b> –∏ –≤–ø–∏—Å—ã–≤–∞–π –Ω–∞–∑–≤–∞–Ω–∏—è. –ü–∏—Å–∞—Ç—å –º–æ–∂–Ω–æ —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ, —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è. –ï—Å–ª–∏ –Ω–∞—à–µ–ª, –Ω–∞–ø–∏—à–∏ —Å—Ç–æ–ø –∏–ª–∏ stop, –ø–æ–∏—Å–∫ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è. –í–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞, –Ω–∏–∂–Ω–µ–µ –º–µ–Ω—é –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.
–¢–∞–∫ –∂–µ –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –∏ –Ω–∞—à–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç, —á—Ç–æ —Ç—ã –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å. –û–±—â–∞—Ç—å—Å—è —Å –Ω–µ–π –º–æ–∂–Ω–æ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ, –∫–∞–∫ —Å —á–µ–ª–æ–≤–µ–∫–æ–º, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ–Ω–∞ –±—É–¥–µ—Ç —É—Ç–æ—á–Ω—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:

<i>–ù–∞–ø—Ä–∏–º–µ—Ä, <b>"–ü—Ä–∏–≤–µ—Ç! –í—á–µ—Ä–∞ –¥—Ä—É–∑—å—è –º–Ω–µ —Ä–∞—Å—Å–∫–∞–∑–∞–ª–∏ –ø—Ä–æ –∫–ª–∞—Å—Å–Ω—ã–π —Ñ–∏–ª—å–º –®–µ—Ä–ª–æ–∫ –•–æ–ª–º. –ù–∞–π–¥–µ—à—å –≥–¥–µ –µ–≥–æ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?"</b></i>

–¢–∞–∫ –∂–µ –≤–æ–∑–º–æ–∂–Ω–æ —É –Ω–µ–µ –ø–æ–ø—Ä–æ—Å–∏—Ç—å —á—Ç–æ-–ª–∏–±–æ –æ—Ç—Å–ª–µ–¥–∏—Ç—å, –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –Ω–∞–ø–∏—à–∏ ¬´–æ—Ç—Å–ª–µ–¥–∏¬ª –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∂–µ–ª–∞–µ–º–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –±—É–¥—É—Ç –≤—ã–≤–µ–¥–µ–Ω—ã –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è. –ê –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –±–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –µ–º—É —É–¥–∞–ª–æ—Å—å —á—Ç–æ-–ª–∏–±–æ –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.

–û–±—â–∞–π—Å—è —Å –Ω–µ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–º–∏, –æ–Ω–∞ —Ä–∞–∑–±–µ—Ä–µ—Ç—Å—è –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ç–µ–±–µ –ø–æ–º–æ–∂–µ—Ç.

–û—Å—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤–æ –≤–∫–ª–∞–¥–∫–µ <b>–ü–æ–º–æ—â—å</b>. –°—á–∞—Å—Ç–ª–∏–≤–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞! üé¨
''', reply_markup=markup, parse_mode='HTML')
    else:
        user_id = message.from_user.id
        user = users_collection.find_one({'user_id': user_id})

        # row3_buttons = [types.KeyboardButton("üî¨ –î–æ–±–∞–≤–∏—Ç—å"), types.KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å"), types.KeyboardButton("üñåÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å")]
        # markup.row(*row3_buttons)

        # row4_buttons = [types.KeyboardButton("üìÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å")]

        if(message.text == 'üìÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å'):
            finding = user.get('finding', [])
            if len(finding) > 0:
                buttons = []
                for text in finding:
                    button_text = text
                    callback_data = f"find:{text}"
                    buttons.append([types.InlineKeyboardButton(button_text, callback_data=callback_data)])

                keyboard = types.InlineKeyboardMarkup(buttons)
                msg = bot.send_message(chat_id, 'C–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –≤–∞–º–∏ –∫–∞—Ä—Ç–∏–Ω, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É:', reply_markup=keyboard)
                bot.register_next_step_handler(msg, findingHandler)
            else:
                msg = bot.send_message(chat_id, '–í—ã —Å–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ.')
                bot.register_next_step_handler(msg, findingHandler)
        elif message.text == 'üî¨ –î–æ–±–∞–≤–∏—Ç—å':

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

            row2_buttons = [types.KeyboardButton("–û—Ç–º–µ–Ω–∞")]
            markup.row(*row2_buttons)

            msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ —á—Ç–æ-–ª–∏–±–æ –¥–æ–±–∞–≤–ª—è—Ç—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ <b>–û—Ç–º–µ–Ω–∞</b>', parse_mode='HTML', reply_markup=markup)
            bot.register_next_step_handler(msg, enterFinding)
        elif(message.text == 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å'):
            findstr = ''

            finding = user.get('finding', [])
            if len(finding) > 0:

                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

                row2_buttons = [types.KeyboardButton("–û—Ç–º–µ–Ω–∞")]
                markup.row(*row2_buttons)

                for index, text in enumerate(finding, start=1):
                    findstr += f'\nüîò {index} - {text}'
                msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä(—á–∏—Å–ª–æ) —ç–ª–µ–º–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –±–æ–ª—å—à–µ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ —á—Ç–æ-–ª–∏–±–æ —É–¥–∞–ª—è—Ç—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ <b>–û—Ç–º–µ–Ω–∞</b> \n' + findstr, reply_markup=markup, parse_mode='HTML')

                bot.register_next_step_handler(msg, deleteFinding)
            else:
                msg = bot.send_message(chat_id, '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π')
                bot.register_next_step_handler(msg, findingHandler)
        elif(message.text == 'üñåÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å'):
            findstr = ''

            finding = user.get('finding', [])
            if len(finding) > 0:

                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

                row2_buttons = [types.KeyboardButton("–û—Ç–º–µ–Ω–∞")]
                markup.row(*row2_buttons)

                for index, text in enumerate(finding, start=1):
                    findstr += f'\nüîò {index} - {text}'
                msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä(—á–∏—Å–ª–æ) —ç–ª–µ–º–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ —á—Ç–æ-–ª–∏–±–æ –º–µ–Ω—è—Ç—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ <b>–û—Ç–º–µ–Ω–∞</b>\n' + findstr, reply_markup=markup, parse_mode='HTML')

                bot.register_next_step_handler(msg, editFinding)
            else:
                msg = bot.send_message(chat_id, '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π')
                bot.register_next_step_handler(msg, findingHandler)

        else:
            if message.content_type == 'voice' or content.startswith('/start') or content.startswith('/find') or content.startswith('/stop') or content.startswith('/info') or content.startswith('/watched') or content.startswith('/later') or content.startswith('/match') or content.startswith('/premiers') or content.startswith('/top10') or content.startswith('/random'):
                msg = bot.reply_to(message, f"–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–æ–ø—É—Å—Ç–∏–º–æ–π –≤–æ –≤–∫–ª–∞–¥–∫–µ <b>üï∞Ô∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å</b>\n\n–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É <b>/home</b> –∏–ª–∏ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É <b>üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</b>", parse_mode='HTML')
                bot.register_next_step_handler(msg, findingHandler)
                return

            if 'finding' not in user:
                user['finding'] = []

            if content not in user['finding']:
                user['finding'].append(content)
                users_collection.update_one({'user_id': user_id}, {'$set': user})
                msg = bot.reply_to(message, f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{content}' –Ω–∞—á–∞–ª–æ—Å—å. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –º—ã –ø–æ–ª—É—á–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–º—É –≤–∞—Å –∫–æ–Ω—Ç–µ–Ω—Ç—É - –º—ã —Å—Ä–∞–∑—É –∂–µ–≤–∞—Å –æ–ø–æ–≤–µ—Å—Ç–∏–º.\n\n–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –ø—Ä–∏:\nüîò–ü–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª—å–º–∞\nüîò–í—ã—Ö–æ–¥ –Ω–æ–≤–æ–π —Å–µ—Ä–∏–∏ —Å–µ—Ä–∏–∞–ª–∞\nüîò–ü–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞ –∏ —Ç.–¥.\n\n–ù–æ –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ–Ω–∞–π—Ç–∏ —Ç–æ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–π—Ç–∏ –≤–æ –≤–∫–ª–∞–¥–∫—É <b>üï∞Ô∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å</b> –∏ –≤—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –∑–∞–ø—Ä–æ—Å", parse_mode='HTML')
            else:
                msg = bot.reply_to(message, f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{content}' –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞—á–∞—Ç–æ, —Ç–∞–∫ –∫–∞–∫ –∑–∞–ø—Ä–æ—Å —Å –ø–æ–¥–æ–±–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º —É–∂–µ –∏–º–µ–µ—Ç—Å—è.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫–∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π –≤–æ –≤–∫–ª–∞–¥–∫–µ <b>üìÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å</b>", parse_mode='HTML')
            bot.register_next_step_handler(msg, findingHandler)

def enterFinding(message):

    chat_id = message.chat.id
    content = message.text
    msg = None

    user_id = message.from_user.id
    user = users_collection.find_one({'user_id': user_id})

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    row2_buttons = [types.KeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")]
    markup.row(*row2_buttons)

    row3_buttons = [types.KeyboardButton("üî¨ –î–æ–±–∞–≤–∏—Ç—å"), types.KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å"), types.KeyboardButton("üñåÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å")]
    markup.row(*row3_buttons)

    row4_buttons = [types.KeyboardButton("üìÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å")]
    markup.row(*row4_buttons)

    if(message.content_type == 'voice'):
        msg = bot.send_message(chat_id, 'üîç–û–π! –ì–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–∏—Å–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.ü§î')
        bot.register_next_step_handler(msg, find_conent)
        return

    if content.lower() == '–æ—Ç–º–µ–Ω–∞' or content.lower() == 'cancel':
        msg = bot.reply_to(message, f"–û—Ç–º–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ <b>üï∞Ô∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å</b>", parse_mode='HTML', reply_markup=markup)
        bot.register_next_step_handler(msg, findingHandler)
        return

    if 'finding' not in user:
        user['finding'] = []

    if content not in user['finding']:
        user['finding'].append(content)
        users_collection.update_one({'user_id': user_id}, {'$set': user})
        msg = bot.reply_to(message, f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{content}' –Ω–∞—á–∞–ª–æ—Å—å. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –º—ã –ø–æ–ª—É—á–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–º—É –≤–∞—Å –∫–æ–Ω—Ç–µ–Ω—Ç—É - –º—ã —Å—Ä–∞–∑—É –∂–µ –≤–∞—Å –æ–ø–æ–≤–µ—Å—Ç–∏–º.\n\n–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –ø—Ä–∏:\nüîò–ü–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª—å–º–∞\nüîò–í—ã—Ö–æ–¥ –Ω–æ–≤–æ–π —Å–µ—Ä–∏–∏ —Å–µ—Ä–∏–∞–ª–∞\nüîò–ü–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞ –∏ —Ç.–¥.\n\n–ù–æ –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —Ç–æ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–π—Ç–∏ –≤–æ –≤–∫–ª–∞–¥–∫—É <b>üï∞Ô∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å</b> –∏ –≤—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –∑–∞–ø—Ä–æ—Å", parse_mode='HTML', reply_markup=markup)
    else:
        msg = bot.reply_to(message, f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{content}' –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞—á–∞—Ç–æ, —Ç–∞–∫ –∫–∞–∫ –∑–∞–ø—Ä–æ—Å —Å –ø–æ–¥–æ–±–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º —É–∂–µ –∏–º–µ–µ—Ç—Å—è.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π –≤–æ –≤–∫–ª–∞–¥–∫–µ <b>üìÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å</b>", parse_mode='HTML', reply_markup=markup)

    bot.register_next_step_handler(msg, findingHandler)

def deleteFinding(message):
    chat_id = message.chat.id
    content = message.text
    msg = None

    user_id = message.from_user.id
    user = users_collection.find_one({'user_id': user_id})
    finding = user.get('finding', [])

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    row2_buttons = [types.KeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")]
    markup.row(*row2_buttons)

    row3_buttons = [types.KeyboardButton("üî¨ –î–æ–±–∞–≤–∏—Ç—å"), types.KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å"), types.KeyboardButton("üñåÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å")]
    markup.row(*row3_buttons)

    row4_buttons = [types.KeyboardButton("üìÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å")]
    markup.row(*row4_buttons)

    if(message.content_type == 'voice'):
        msg = bot.send_message(chat_id, 'üîç–û–π! –ì–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–∏—Å–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.ü§î')
        bot.register_next_step_handler(msg, find_conent)
        return

    if content.lower() == '–æ—Ç–º–µ–Ω–∞' or content.lower() == 'cancel':
        msg = bot.reply_to(message, f"–û—Ç–º–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ", parse_mode='HTML', reply_markup=markup)
        bot.register_next_step_handler(msg, findingHandler)
        return

    if int(content) - 1 >= 0 and int(content) - 1 < len(finding):
        item = user['finding'].pop(int(content) - 1)
        users_collection.update_one({'user_id': user_id}, {'$set': user})
        findstr = ''

        for index, text in enumerate(user['finding'], start=1):
            findstr += f'\nüîò {index} - {text}'

        msg = bot.send_message(chat_id, f'–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É <b>{item}</b> –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:\n' + (findstr if len(user['finding']) > 0 else '–Ω–µ—Ç'), parse_mode='HTML', reply_markup=markup)
        bot.register_next_step_handler(msg, findingHandler)
    else:
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–µ–Ω–Ω–æ–µ –≤–∞–º–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑', reply_markup=markup)
        bot.register_next_step_handler(msg, findingHandler)

def editFinding(message):
    chat_id = message.chat.id
    content = message.text
    msg = None

    user_id = message.from_user.id
    user = users_collection.find_one({'user_id': user_id})
    finding = user.get('finding', [])

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    row2_buttons = [types.KeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")]
    markup.row(*row2_buttons)

    row3_buttons = [types.KeyboardButton("üî¨ –î–æ–±–∞–≤–∏—Ç—å"), types.KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å"), types.KeyboardButton("üñåÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å")]
    markup.row(*row3_buttons)

    row4_buttons = [types.KeyboardButton("üìÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å")]
    markup.row(*row4_buttons)

    if(message.content_type == 'voice'):
        msg = bot.send_message(chat_id, 'üîç–û–π! –ì–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–∏—Å–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.ü§î')
        bot.register_next_step_handler(msg, find_conent)
        return

    if content.lower() == '–æ—Ç–º–µ–Ω–∞' or content.lower() == 'cancel':
        msg = bot.reply_to(message, f"–û—Ç–º–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", parse_mode='HTML', reply_markup=markup)
        bot.register_next_step_handler(msg, findingHandler)
        return


    if int(content) - 1 >= 0 and int(content) - 1 < len(finding):
        item = user['finding'][int(content) - 1]
        user['finding'][int(content) - 1] = 'replace_element_event#'+user['finding'][int(content) - 1]

        users_collection.update_one({'user_id': user_id}, {'$set': user})

        msg = bot.reply_to(message, f'–í–≤–µ–¥–∏—Ç–µ –∏–∑–º–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ <b>{item}</b>:', parse_mode='HTML')
        bot.register_next_step_handler(msg, editFindingEnter)
    else:
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–µ–Ω–Ω–æ–µ –≤–∞–º–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑', reply_markup=markup)
        bot.register_next_step_handler(msg, findingHandler)

def editFindingEnter(message):
    chat_id = message.chat.id
    content = message.text
    msg = None

    user_id = message.from_user.id
    user = users_collection.find_one({'user_id': user_id})

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    row2_buttons = [types.KeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")]
    markup.row(*row2_buttons)

    row3_buttons = [types.KeyboardButton("üî¨ –î–æ–±–∞–≤–∏—Ç—å"), types.KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å"), types.KeyboardButton("üñåÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å")]
    markup.row(*row3_buttons)

    row4_buttons = [types.KeyboardButton("üìÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å")]
    markup.row(*row4_buttons)

    index = next(index for index, item in enumerate(user['finding']) if item.startswith('replace_element_event'))

    if(message.content_type == 'voice'):
        msg = bot.send_message(chat_id, 'üîç–û–π! –ì–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–∏—Å–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.ü§î')
        bot.register_next_step_handler(msg, find_conent)
        return

    if content.lower() == '–æ—Ç–º–µ–Ω–∞' or content.lower() == 'cancel':
        msg = bot.reply_to(message, f"–û—Ç–º–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", parse_mode='HTML', reply_markup=markup)
        bot.register_next_step_handler(msg, findingHandler)
        user['finding'][index] = user['finding'][index].split('#')[1]
        users_collection.update_one({'user_id': user_id}, {'$set': user})
        return
    try:

        if content in user['finding']:
            msg = bot.reply_to(message, f'–î–∞–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–º–µ–Ω–∏–Ω–æ, —Ç–∞–∫–æ–π –∑–∞–ø—Ä–æ—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:', parse_mode='HTML')
            bot.register_next_step_handler(msg, editFindingEnter)
            return

        user['finding'][index] = content
        users_collection.update_one({'user_id': user_id}, {'$set': user})
        findstr = ''

        for index, text in enumerate(user['finding'], start=1):
            findstr += f'\nüîò {index} - {text}'

        msg = bot.send_message(chat_id, f'–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω\n\n–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:\n' + (findstr if len(user['finding']) > 0 else '–Ω–µ—Ç'), parse_mode='HTML', reply_markup=markup)
        bot.register_next_step_handler(msg, findingHandler)
    except ValueError:
        msg = bot.send_message(chat_id, '–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –Ω–æ–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.', reply_markup=markup)
        bot.register_next_step_handler(msg, findingHandler) 

@bot.message_handler(commands=['start'])
def start_message(message):

    option_menu_1 = types.BotCommand(command='start', description='–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞')
    option_menu_2 = types.BotCommand(command='home', description='–ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω')
    option_menu_3 = types.BotCommand(command='find', description='–ù–∞–π—Ç–∏')
    option_menu_4 = types.BotCommand(command='stop', description='–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫')
    option_menu_5 = types.BotCommand(command='info', description='–ü–æ–º–æ—â—å')
    option_menu_6 = types.BotCommand(command='watched', description='–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ')
    option_menu_7 = types.BotCommand(command='later', description='–ù–∞ –ø–æ—Ç–æ–º')
    option_menu_8 = types.BotCommand(command='match', description='–ü–æ–¥–±–æ—Ä–∫–∏')
    option_menu_9 = types.BotCommand(command='premiers', description='–ü—Ä–µ–º—å–µ—Ä—ã')
    option_menu_10 = types.BotCommand(command='top10', description='–¢–æ–ø 10')
    option_menu_11 = types.BotCommand(command='random', description='–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º')
    bot.set_my_commands([
        option_menu_1,
        option_menu_2,
        option_menu_3,
        option_menu_4,
        option_menu_5,
        option_menu_6,
        option_menu_7,
        option_menu_8,
        option_menu_9,
        option_menu_10,
        option_menu_11,
    ])
    bot.set_chat_menu_button(message.chat.id, types.MenuButtonCommands('commands'))

    user_id = message.from_user.id

    existing_user = users_collection.find_one({'user_id': user_id})

    # Add two buttons below the input field
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # row1_buttons = [types.KeyboardButton("Home")]
    # markup.row(*row1_buttons)

    row2_buttons = [types.KeyboardButton("üîç –ù–∞–π—Ç–∏"), types.KeyboardButton("‚úîÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ"), types.KeyboardButton("‚è∞ –ù–∞ –ø–æ—Ç–æ–º")]
    markup.row(*row2_buttons)
    row3_buttons = [types.KeyboardButton("üì∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), types.KeyboardButton("üï∞Ô∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å"), types.KeyboardButton("‚Ñπ –ü–æ–º–æ—â—å")]
    markup.row(*row3_buttons)
    row4_buttons = [types.KeyboardButton("üó≥Ô∏è –ü–æ–¥–±–æ—Ä–∫–∏"), types.KeyboardButton("üí• –ü—Ä–µ–º—å–µ—Ä—ã"), types.KeyboardButton("ü•á –¢–æ–ø 10")]
    markup.row(*row4_buttons)

    if not existing_user:
        # bot.reply_to(message, '–í—ã –Ω–æ–º–µ–Ω—å–∫–∏–π? –î–∞–≤–∞–π—Ç–µ —è –Ω–µ–º–Ω–æ–≥–æ —Ä–∞—Å—Å–∫–∞–∂—É –æ —Å–µ–±–µ!', reply_markup=markup)
        bot.reply_to(message, '''
–ü—Ä–∏–≤–µ—Ç! üåü –ì–æ—Ç–æ–≤ –∫ –∫–∏–Ω–æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º? üçø
–ù–∞–ø–∏—à–∏ –º–Ω–µ, —á—Ç–æ —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–µ–≥–æ–¥–Ω—è, –∏ –º—ã –Ω–∞–π–¥–µ–º –¥–ª—è —Ç–µ–±—è –∏–¥–µ–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç! üòä

–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É <b>–ù–∞–π—Ç–∏</b> –∏ –≤–ø–∏—Å—ã–≤–∞–π –Ω–∞–∑–≤–∞–Ω–∏—è. –ü–∏—Å–∞—Ç—å –º–æ–∂–Ω–æ —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ, —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è. –ï—Å–ª–∏ –Ω–∞—à–µ–ª, –Ω–∞–ø–∏—à–∏ —Å—Ç–æ–ø –∏–ª–∏ stop, –ø–æ–∏—Å–∫ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è. –í–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞, –Ω–∏–∂–Ω–µ–µ –º–µ–Ω—é –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.
–¢–∞–∫ –∂–µ –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –∏ –Ω–∞—à–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç, —á—Ç–æ —Ç—ã –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å. –û–±—â–∞—Ç—å—Å—è —Å –Ω–µ–π –º–æ–∂–Ω–æ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ, –∫–∞–∫ —Å —á–µ–ª–æ–≤–µ–∫–æ–º, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ–Ω–∞ –±—É–¥–µ—Ç —É—Ç–æ—á–Ω—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:

<i>–ù–∞–ø—Ä–∏–º–µ—Ä, <b>"–ü—Ä–∏–≤–µ—Ç! –í—á–µ—Ä–∞ –¥—Ä—É–∑—å—è –º–Ω–µ —Ä–∞—Å—Å–∫–∞–∑–∞–ª–∏ –ø—Ä–æ –∫–ª–∞—Å—Å–Ω—ã–π —Ñ–∏–ª—å–º –®–µ—Ä–ª–æ–∫ –•–æ–ª–º. –ù–∞–π–¥–µ—à—å –≥–¥–µ –µ–≥–æ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?"</b></i>

–¢–∞–∫ –∂–µ –≤–æ–∑–º–æ–∂–Ω–æ —É –Ω–µ–µ –ø–æ–ø—Ä–æ—Å–∏—Ç—å —á—Ç–æ-–ª–∏–±–æ –æ—Ç—Å–ª–µ–¥–∏—Ç—å, –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –Ω–∞–ø–∏—à–∏ ¬´–æ—Ç—Å–ª–µ–¥–∏¬ª –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∂–µ–ª–∞–µ–º–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –±—É–¥—É—Ç –≤—ã–≤–µ–¥–µ–Ω—ã –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è. –ê –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –±–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –µ–º—É —É–¥–∞–ª–æ—Å—å —á—Ç–æ-–ª–∏–±–æ –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.

–û–±—â–∞–π—Å—è —Å –Ω–µ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–º–∏, –æ–Ω–∞ —Ä–∞–∑–±–µ—Ä–µ—Ç—Å—è –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ç–µ–±–µ –ø–æ–º–æ–∂–µ—Ç.

–û—Å—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤–æ –≤–∫–ª–∞–¥–∫–µ <b>–ü–æ–º–æ—â—å</b>. –°—á–∞—Å—Ç–ª–∏–≤–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞! üé¨
''', parse_mode='HTML', reply_markup=markup)
        new_user = {'user_id': user_id, 'language': 'ru_RU'}
        users_collection.insert_one(new_user)
    else:
        bot.reply_to(message, '–ü—Ä–∏–≤–µ—Ç! üåü –ö–∞–∫–∏–µ —Ñ–∏–ª—å–º—ã –∏–ª–∏ —Å–µ—Ä–∏–∞–ª—ã —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–µ–≥–æ–¥–Ω—è? üçø‚ú®', reply_markup=markup)


# Handle the button clicks - in ["Clear", "Watched", "Favorites genres", "View collections"]
@bot.message_handler(func=lambda message: message.text)
def handle_buttons(message):
    user_id = message.from_user.id
    user = users_collection.find_one({'user_id': user_id})
    

    if message.text == "‚úîÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ" or message.text.startswith("/watched"):
        # Retrieve and display the list of watched movies
        user = users_collection.find_one({'user_id': user_id})
        watched_movies = None
        if 'watched' in user:
            watched_movies = user.get('watched', [])
        else: 
            bot.send_message(user_id, "–í–∞—à —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç, –Ω–æ –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —á—Ç–æ-—Ç–æ —Å—é–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å")
            return
        
        rating_list = user.get('rating', [])
        if watched_movies:
            
            inline_keyboard = []

            for movie in watched_movies:
                # –ò—â–µ–º –æ—Ü–µ–Ω–∫—É –ø–æ id —Ñ–∏–ª—å–º–∞ –≤ rating_list
                rating_object = next((item for item in rating_list if item['id'] == movie['id']), {'value': 0})
                rating = rating_object['value']

                # –°–æ–∑–¥–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞ (–∑–≤–µ–∑–¥–∞)
                button_text = f"{movie['name']}{f' - {rating}/5' if rating > 0 else ''}"
                callback_data = f"movie:{movie['id']}"
                inline_keyboard.append([types.InlineKeyboardButton(button_text, callback_data=callback_data)])


            markup = types.InlineKeyboardMarkup(inline_keyboard)
            new_last_message_id = True
            users_collection.update_one({'user_id': user_id}, {'$set': {'isWatched': new_last_message_id}})


            bot.send_message(user_id, f"–ü—Ä–∏–≤–µ—Ç! üåü –í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —É–∂–µ –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏.\n\n–í—ã –º–æ–∂–µ—Ç–µ –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ –∫–∞–∂–¥–æ–º—É —Ñ–∏–ª—å–º—Éü§©, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –∫–∞—Ä—Ç–æ—á–∫—É –∏, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. üé¨‚ú®\n\n\n", reply_markup=markup)
        else:
            bot.send_message(user_id, "üé¨ –ö–∞–∂–µ—Ç—Å—è, —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –ø—É—Å—Ç. –î–∞–≤–∞–π—Ç–µ –Ω–∞–π–¥–µ–º —Ñ–∏–ª—å–º –∏ –æ—Ç–º–µ—Ç–∏–º –µ–≥–æ –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π!")
    elif message.text == 'üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞' or message.text == '/home':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        # row1_buttons = [types.KeyboardButton("Home")]
        # markup.row(*row1_buttons)

        row2_buttons = [types.KeyboardButton("üîç –ù–∞–π—Ç–∏"), types.KeyboardButton("‚úîÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ"), types.KeyboardButton("‚è∞ –ù–∞ –ø–æ—Ç–æ–º")]
        markup.row(*row2_buttons)

        row3_buttons = [types.KeyboardButton("üì∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), types.KeyboardButton("üï∞Ô∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å"), types.KeyboardButton("‚Ñπ –ü–æ–º–æ—â—å")]
        markup.row(*row3_buttons)

        row4_buttons = [types.KeyboardButton("üó≥Ô∏è –ü–æ–¥–±–æ—Ä–∫–∏"), types.KeyboardButton("üí• –ü—Ä–µ–º—å–µ—Ä—ã"), types.KeyboardButton("ü•á –¢–æ–ø 10")]
        markup.row(*row4_buttons)

        bot.send_message(user_id, '''
–ü—Ä–∏–≤–µ—Ç! üåü –ì–æ—Ç–æ–≤ –∫ –∫–∏–Ω–æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º? üçø
–ù–∞–ø–∏—à–∏ –º–Ω–µ, —á—Ç–æ —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–µ–≥–æ–¥–Ω—è, –∏ –º—ã –Ω–∞–π–¥–µ–º –¥–ª—è —Ç–µ–±—è –∏–¥–µ–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç! üòä

–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É <b>–ù–∞–π—Ç–∏</b> –∏ –≤–ø–∏—Å—ã–≤–∞–π –Ω–∞–∑–≤–∞–Ω–∏—è. –ü–∏—Å–∞—Ç—å –º–æ–∂–Ω–æ —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ, —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è. –ï—Å–ª–∏ –Ω–∞—à–µ–ª, –Ω–∞–ø–∏—à–∏ —Å—Ç–æ–ø –∏–ª–∏ stop, –ø–æ–∏—Å–∫ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è. –í–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞, –Ω–∏–∂–Ω–µ–µ –º–µ–Ω—é –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.
–¢–∞–∫ –∂–µ –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –∏ –Ω–∞—à–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç, —á—Ç–æ —Ç—ã –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å. –û–±—â–∞—Ç—å—Å—è —Å –Ω–µ–π –º–æ–∂–Ω–æ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ, –∫–∞–∫ —Å —á–µ–ª–æ–≤–µ–∫–æ–º, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ–Ω–∞ –±—É–¥–µ—Ç —É—Ç–æ—á–Ω—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:

<i>–ù–∞–ø—Ä–∏–º–µ—Ä, <b>"–ü—Ä–∏–≤–µ—Ç! –í—á–µ—Ä–∞ –¥—Ä—É–∑—å—è –º–Ω–µ —Ä–∞—Å—Å–∫–∞–∑–∞–ª–∏ –ø—Ä–æ –∫–ª–∞—Å—Å–Ω—ã–π —Ñ–∏–ª—å–º –®–µ—Ä–ª–æ–∫ –•–æ–ª–º. –ù–∞–π–¥–µ—à—å –≥–¥–µ –µ–≥–æ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?"</b></i>

–¢–∞–∫ –∂–µ –≤–æ–∑–º–æ–∂–Ω–æ —É –Ω–µ–µ –ø–æ–ø—Ä–æ—Å–∏—Ç—å —á—Ç–æ-–ª–∏–±–æ –æ—Ç—Å–ª–µ–¥–∏—Ç—å, –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –Ω–∞–ø–∏—à–∏ ¬´–æ—Ç—Å–ª–µ–¥–∏¬ª –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∂–µ–ª–∞–µ–º–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –±—É–¥—É—Ç –≤—ã–≤–µ–¥–µ–Ω—ã –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è. –ê –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –±–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –µ–º—É —É–¥–∞–ª–æ—Å—å —á—Ç–æ-–ª–∏–±–æ –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.

–û–±—â–∞–π—Å—è —Å –Ω–µ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–º–∏, –æ–Ω–∞ —Ä–∞–∑–±–µ—Ä–µ—Ç—Å—è –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ç–µ–±–µ –ø–æ–º–æ–∂–µ—Ç.

–û—Å—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤–æ –≤–∫–ª–∞–¥–∫–µ <b>–ü–æ–º–æ—â—å</b>. –°—á–∞—Å—Ç–ª–∏–≤–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞! üé¨
''', reply_markup=markup, parse_mode='HTML')
    elif message.text == 'üîç –ù–∞–π—Ç–∏':

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

        row2_buttons = [types.KeyboardButton("–°—Ç–æ–ø")]
        markup.row(*row2_buttons)

        msg = bot.send_message(message.chat.id, '–í–≤–æ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –≤–∞—Å —Ñ–∏–ª—å–º–∞, –∞ –º—ã –±—É–¥–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å —Ä—É–∑–µ–ª—å—Ç–∞—Ç—ã —Å–ø–∏—Å–∫–æ–º. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ —Å—Ç–æ–ø –∏–ª–∏ stop.\n\n–í–Ω–∏–º–∞–Ω–∏–µ: –ø–æ–∫–∞ –≤—ã –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ—Å—å –º–µ–Ω—é –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ!', reply_markup=markup)

        bot.register_next_step_handler(msg, find_conent)

    elif message.text == '‚è∞ –ù–∞ –ø–æ—Ç–æ–º' or message.text.startswith("/later"):
        user = users_collection.find_one({'user_id': user_id})
        watched_movies = None
        if 'later' in user:
            watched_movies = user.get('later', [])
        else: 
            bot.send_message(user_id, "–í–∞—à —Å–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Ñ–∏–ª—å–º–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç, –Ω–æ –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å")
            return
        
        if watched_movies:
            
            inline_keyboard = []

            for movie in watched_movies:

                # –°–æ–∑–¥–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞ (–∑–≤–µ–∑–¥–∞)
                button_text = f"{movie['name']}"
                callback_data = f"movie:{movie['id']}"
                inline_keyboard.append([types.InlineKeyboardButton(button_text, callback_data=callback_data)])

            markup = types.InlineKeyboardMarkup(inline_keyboard)
            new_last_message_id = True
            users_collection.update_one({'user_id': user_id}, {'$set': {'isWatched': new_last_message_id}})


            bot.send_message(user_id, f"–ü—Ä–∏–≤–µ—Ç! üåü –í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–∞ –ø–æ—Ç–æ–º.\n\n–í—ã –º–æ–∂–µ—Ç–µ –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ –∫–∞–∂–¥–æ–º—É —Ñ–∏–ª—å–º—Éü§©, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –∫–∞—Ä—Ç–æ—á–∫—É –∏, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. üé¨‚ú®\n\n\n", reply_markup=markup)
        else:
            bot.send_message(user_id, "üé¨ –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –ø—É—Å—Ç. –ù–∞–π–¥–∏—Ç–µ —Ñ–∏–ª—å–º –∏ –∑–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±—ã—Ç—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∂–µ.")
    elif message.text == 'üó≥Ô∏è –ü–æ–¥–±–æ—Ä–∫–∏' or message.text.startswith("/match"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        row2_buttons = [types.KeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")]
        markup.row(*row2_buttons)

        row3_buttons = [types.KeyboardButton("üòç –õ—é–±–∏–º—ã–π –∂–∞–Ω—Ä"), types.KeyboardButton("üéâ –ü–æ —Ç–µ–º–∞–º")]
        markup.row(*row3_buttons)

        row4_buttons = [types.KeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º")]
        markup.row(*row4_buttons)

        bot.send_message(user_id, "üìã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –ø–æ–¥–±–æ—Ä–æ–∫! \n\nüîç–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–¥–±–æ—Ä–∫–∏, –ø–æ–¥–±–æ—Ä–∫–∏ –ø–æ –∂–∞–Ω—Ä—É –∏ —Å–ª—É—á–∞–π–Ω—ã–µ —Ñ–∏–ª—å–º—ã. üí° –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–æ–≤—ã–µ –≤–∏–¥—ã –ø–æ–¥–±–æ—Ä–æ–∫, —Ç–æ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç _________", reply_markup=markup)
    elif message.text == 'üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º' or message.text.startswith("/random"):
        deep_info_url = f'https://api.kinopoisk.dev/v1.4/movie/random?lists=top250'
        kino_dev = '8W83T87-DV244BK-PEE7PXK-6PS64WX'

        headers_deep = {
            'accept': 'application/json',
            'X-API-KEY': kino_dev
        }

        response_random = requests.get(deep_info_url, headers=headers_deep)
        random_item = response_random.json()

        movie_details, photo_url, movie_name, genres, firmUrl = get_movie_details(random_item["id"])

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        markup = types.InlineKeyboardMarkup()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —Ñ–∏–ª—å–º –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ
        is_watched = any(movie.get('id') == random_item["id"] for movie in user.get('watched', []))
        is_later = any(movie.get('id') == random_item["id"] for movie in user.get('later', []))

        if is_watched:
            markup.add(types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö", callback_data=f"unwatched:{random_item['id']}:without"))
        else:
            markup.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ", callback_data=f"watched:{random_item['id']}:without"))

        if not is_later:
            markup.add(types.InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∂–µ", callback_data=f"watch_later:{random_item['id']}:without"))
        else:
            markup.add(types.InlineKeyboardButton("–£–±—Ä–∞—Ç—å –∏–∑ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∂–µ", callback_data=f"unwatch_later:{random_item['id']}:without"))

        random_last = bot.send_photo(user_id, photo_url, caption=movie_details, parse_mode='HTML', reply_markup=markup)
        # user['last_message_id'] = 
        users_collection.update_one({'user_id': user_id}, {'$set': {'last_message_id': random_last.message_id}})

    elif message.text == 'ü•á –¢–æ–ø 10' or message.text.startswith("/top10"):
        category = 'top10-hd'

        base_url = f'https://api.kinopoisk.dev/v1.4/movie?page=1&limit=10&lists={category}'
        api_key = '8W83T87-DV244BK-PEE7PXK-6PS64WX'

        headers = {
            'accept': 'application/json',
            'X-API-KEY': api_key
        }

        response = requests.get(base_url, headers=headers)
        movies = []

        print(response.json())

        if response.status_code == 200:
            movies_data = response.json()
            items = movies_data.get('docs', [])

            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ nameRu –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª—å–º–∞
            filtered_movies = [{'name': movie.get('name'), 'id': movie.get('id')} for movie in items if (movie.get('type') == 'movie' or movie.get('type') == 'tv-series')]

            movies = filtered_movies
        else:
            print(f"Error: {response.status_code}")
            movies = []

        send_movies_results(bot, user_id, movies, '–Ω–∞–π–¥–∏', '')
    elif message.text == 'üí• –ü—Ä–µ–º—å–µ—Ä—ã' or message.text.startswith("/premiers"):
        category = 'the_closest_releases'

        base_url = f'https://api.kinopoisk.dev/v1.4/movie?page=1&limit=10&lists={category}'
        api_key = '8W83T87-DV244BK-PEE7PXK-6PS64WX'

        headers = {
            'accept': 'application/json',
            'X-API-KEY': api_key
        }

        response = requests.get(base_url, headers=headers)
        movies = []

        print(response.json())

        if response.status_code == 200:
            movies_data = response.json()
            items = movies_data.get('docs', [])

            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ nameRu –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª—å–º–∞
            filtered_movies = [{'name': movie.get('name'), 'id': movie.get('id')} for movie in items if (movie.get('type') == 'movie' or movie.get('type') == 'tv-series')]

            movies = filtered_movies
        else:
            print(f"Error: {response.status_code}")
            movies = []

        send_movies_results(bot, user_id, movies, '–Ω–∞–π–¥–∏', '')
    elif message.text == '/stop':
        bot.send_message(user_id, "–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ —ç–ª–µ–º–µ–Ω—Ç –º–µ–Ω—é 'üîç –ù–∞–π—Ç–∏'.")
    elif message.text == 'üï∞Ô∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        row2_buttons = [types.KeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")]
        markup.row(*row2_buttons)

        row3_buttons = [types.KeyboardButton("üî¨ –î–æ–±–∞–≤–∏—Ç—å"), types.KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å"), types.KeyboardButton("üñåÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å")]
        markup.row(*row3_buttons)

        row4_buttons = [types.KeyboardButton("üìÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å")]
        markup.row(*row4_buttons)

        msg = bot.send_message(user_id, "üï∞Ô∏è –í —ç—Ç–æ–º –æ–∫–Ω–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º.\n\n–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å, —É–¥–∞–ª—è—Ç—å, –∏–∏–∑–º–µ–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É.\n\n–ï—Å–ª–∏, –≤ –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ, –≤—ã –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –∂–µ–ª–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ç–æ —ç—Ç–æ –±—É–¥–µ—Ç —Ä–∞—Å—Ü–µ–Ω–∏–≤–∞—Ç—å—Å—è –∫–∞–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞.", reply_markup=markup)
        bot.register_next_step_handler(msg, findingHandler)

    elif message.text == 'üéâ –ü–æ —Ç–µ–º–∞–º':
        
        navigation_buttons = []
        navigation_buttons.append(
            [
                types.InlineKeyboardButton("üí• –ü—Ä–µ–º—å–µ—Ä—ã", callback_data="collection&the_closest_releases"),
                types.InlineKeyboardButton("üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ", callback_data="collection&bestofamediateka")
            ],
        )

        navigation_buttons.append(
            [
                types.InlineKeyboardButton("ü•á –¢–æ–ø 10", callback_data="collection&top10-hd"),
                types.InlineKeyboardButton("ü§£ –ö–æ–º–µ–¥–∏–∏", callback_data="collection&family_comedies")
            ],

        )
        
        navigation_buttons.append(
            [
                types.InlineKeyboardButton("üëë –õ—É—á—à–µ–µ 2023", callback_data="collection&top20of2023"),
                types.InlineKeyboardButton("üéÑ –ù–æ–≤—ã–π –≥–æ–¥", callback_data="collection&ny_family")
            ]
        )

        navigation_buttons.append(
            [
                types.InlineKeyboardButton("üõãÔ∏è –°–µ–º–µ–π–Ω–æ–µ", callback_data="collection&hd-family")
            ]
        )

        inline_keyboard = navigation_buttons
        keyboard = types.InlineKeyboardMarkup(inline_keyboard)

        bot.send_message(user_id, "üéÅ –ù–∞—à–∏ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–¥–±–æ—Ä–∫–∏ —Ñ–∏–ª—å–º–æ–≤ –∂–¥—É—Ç –≤–∞—Å!", reply_markup=keyboard)
    elif message.text == "üòç –õ—é–±–∏–º—ã–π –∂–∞–Ω—Ä":
        watched_movies = []
        if 'watched' in user:
            watched_movies = user.get('watched', [])

        all_genres = [genre for movie in watched_movies for genre in movie.get('genres', [])]

        if len(all_genres) > 0:
            genre_counts = {}
            for genre in all_genres:
                genre_counts[genre] = genre_counts.get(genre, 0) + 1

            unique_genres = sorted(set(all_genres), key=lambda x: genre_counts[x], reverse=True)
            favorite_genres = unique_genres[:3]

            navigation_buttons = []

            for item in favorite_genres:
                navigation_buttons.append(
                [
                    types.InlineKeyboardButton(item.capitalize(), callback_data=f"genre_list&{item}"),
                ]
            )
            inline_keyboard = navigation_buttons
            keyboard = types.InlineKeyboardMarkup(inline_keyboard)
            
            bot.send_message(user_id, "‚ù£Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ª—é–±–∏–º—ã–π –∂–∞–Ω—Ä –∏ –º—ã —Å–æ–±–µ—Ä–µ–º —Å –Ω–∏–º –ø–æ–¥–±–æ—Ä–∫—É!", reply_markup=keyboard)

        else:
            bot.send_message(user_id, "üòø –ú—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –ø–æ–¥–±–æ—Ä–∫—É –ø–æ –ª—é–±–∏–º–æ–º—É –∂–∞–Ω—Ä—É, –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ñ–∏–ª—å–º—ã –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –∏ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–º –æ—Ü–µ–Ω–∫—É, –∞ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ <b>üó≥Ô∏è –ü–æ–¥–±–æ—Ä–∫–∏</b> ")
                  

    elif message.text == "üì∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" or message.text.startswith("/stats"):
        # Retrieve user's watched movies and genres
        user = users_collection.find_one({'user_id': user_id})
        watched_movies = []
        if 'watched' in user:
            watched_movies = user.get('watched', [])

        
        # Extract genres from watched movies
        all_genres = [genre for movie in watched_movies for genre in movie.get('genres', [])]
        if len(all_genres) == 0:
            all_genres = ['–ü–æ–º–µ—á–∞–π—Ç–µ —Ñ–∏–ª—å–º—ã –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –∏ —Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫–∏. –ú—ã –ø–æ–∫–∞–∂–µ–º –≤–∞—à–∏ –ª—é–±–∏–º—ã–µ –∂–∞–Ω—Ä—ã']

        # Create a dictionary to count the occurrences of each genre
        genre_counts = {}
        for genre in all_genres:
            genre_counts[genre] = genre_counts.get(genre, 0) + 1

        # Create a list of unique genres in descending order of occurrence
        unique_genres = sorted(set(all_genres), key=lambda x: genre_counts[x], reverse=True)

        ratings = user.get('rating', [])
        total_ratings = len(ratings)
        average_rating = 0

        if total_ratings > 0:
            total_sum = sum(rating['value'] for rating in ratings)  # –°—É–º–º–∏—Ä—É–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
            average_rating = round(total_sum / total_ratings, 1)  # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª
        else:
            total_ratings = '–û—Ü–µ–Ω–∏–≤–∞–π—Ç–µ —Ñ–∏–ª—å–º—ã, —á—Ç–æ–±—ã –º—ã –ø–æ–Ω–∏–º–∞–ª–∏ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è.'

        later_list = user.get('later', [])
        later_list_len = len(later_list)
        print(later_list)

        if later_list_len <= 0:
            later_list_len = '–ù–∞—Ö–æ–¥–∏ —Ñ–∏–ª—å–º—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è "–ù–∞ –ø–æ—Ç–æ–º"'

        finding = user.get('finding', [])
        finding_len = len(finding)
        print(finding_len)

        if finding_len <= 0:
            finding_len = '–ß–µ–≥–æ-—Ç–æ –æ—á–µ–Ω—å —Å–∏–ª—å–Ω–æ –∂–¥–µ—Ç–µ? –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–∞–º –æ–± —ç—Ç–æ–º, –∞ –º—ã –≤–∞–º —Å–æ–æ–±—â–∏–º, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å.'

        # Display the list of favorite genres with counts
        # genres_with_counts = [f"{genre}: {genre_counts[genre]}" for genre in unique_genres]
        bot.send_message(user_id, f"<b>üåüüìñ –í–æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å:</b>\n\n<b>–í–∞—à–∏ —Å–∞–º—ã–µ –ª—é–±–∏–º—ã–µ –∂–∞–Ω—Ä—ã:</b> üòç {', '.join(unique_genres[:3])}\n\n<b>–°–∫–æ–ª—å–∫–∏ —Ñ–∏–ª—å–º–æ–≤/—Å–µ—Ä–∏–∞–ª–æ–≤ –≤—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏:</b> üßÆ {len(watched_movies) if len(watched_movies) > 0 else '–ï—Å–ª–∏ –≤—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ —Ñ–∏–ª—å–º, —Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç–µ –µ–≥–æ –∏ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –≤ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ, —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–±–∏—Ä–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∏–º–µ–Ω–Ω–æ –ø–æ–¥ –≤–∞—Å!'}\n\n<b>–°–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å–º–æ–≤ –≤—ã –æ—Ç–ª–æ–∂–∏–ª–∏ –Ω–∞ –ø–æ—Ç–æ–º:</b> ‚è∞ {later_list_len}\n\n<b>–°–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å–º–æ–≤ –≤—ã –æ—Ü–µ–Ω–∏–ª–∏:</b> üëç {total_ratings}\n\n<b>–°–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å–º–æ–≤ –≤—ã –æ–∂–∏–¥–∞–µ—Ç–µ:</b> ‚åõ {finding_len}\n\n\n<b>üöÄ –ß–µ–º –±–æ–ª—å—à–µ –≤—ã –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –¥–∞–Ω–Ω—ã–º –±–æ—Ç–æ–º, —Ç–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º—ã —Å–º–æ–∂–µ–º –≤–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å!ü§ì</b>", parse_mode='HTML')
    elif message.text == "Match film by genre":
        # Retrieve user's watched movies and genres
        user = users_collection.find_one({'user_id': user_id})
        watched_movies = None
        if 'watched' in user:
            watched_movies = user.get('watched', [])
        else: 
            bot.send_message(user_id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ø–∞—Å—Ç—å —Å—é–¥–∞, —Ç–∞–∫ –∫–∞–∫ –æ –≤–∞—Å –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
            return

        # Extract genres from watched movies
        all_genres = None
        if 'genres' in user:
            all_genres = [genre for movie in watched_movies for genre in movie.get('genres', [])]
        else: 
            bot.send_message(user_id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ø–∞—Å—Ç—å —Å—é–¥–∞, —Ç–∞–∫ –∫–∞–∫ –æ –≤–∞—Å –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
            return

        # Create a dictionary to count the occurrences of each genre
        genre_counts = {}
        for genre in all_genres:
            genre_counts[genre] = genre_counts.get(genre, 0) + 1

        # Create a list of unique genres in descending order of occurrence
        unique_genres = sorted(set(all_genres), key=lambda x: genre_counts[x], reverse=True)

        # Display the list of favorite genres with counts
        genres_with_counts = [f"{genre}: {genre_counts[genre]}" for genre in unique_genres]

        # Number of genres to display
        genres_to_display = 4

        # Create a ReplyKeyboardMarkup
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        row1_buttons = []
        # Iterate over the first 'genres_to_display' genres
        for i in range(min(genres_to_display, len(unique_genres))):
            genre = unique_genres[i]
            # Add a button to the markup
            row1_buttons.append(types.KeyboardButton(genre))

        markup.row(*row1_buttons)

        # Add the "Home" button in a new row
        markup.row(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"))

        bot.send_message(user_id, "–í –º–µ–Ω—é –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã –≤–∞—à–∏ –ª—é–±–∏–º—ã–µ –∂–∞–Ω—Ä—ã, –≤—ã–±–µ—Ä–µ—Ç–µ –∂–∞–Ω—Ä –∏ –º—ã —Å–æ–±–µ—Ä–µ–º –ø–æ–¥–±–æ—Ä–∫—É –¥–ª—è –í–ê–°:", reply_markup=markup)
    elif message.text == "‚Ñπ –ü–æ–º–æ—â—å" or message.text.startswith("/info"):
        bot.send_message(user_id, '''
–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º:

<b>–ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</b>: 
- –µ—Å–ª–∏ –Ω–µ –ø–æ–º–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞, –Ω–æ –ø–æ–º–Ω–∏—Ç–µ –µ–≥–æ —Å—é–∂–µ—Ç, —Ç–æ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –Ω–µ–π—Ä–æ—Å–µ—Ç—å –ø–æ–º–æ—á—å. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –∫–æ–º–∞–Ω–¥–∞ ¬´–ø–æ–º–æ–≥–∏¬ª –∏–ª–∏ ¬´–ø–æ–¥—Å–∫–∞–∂–∏¬ª –∏ –≤–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—å –ø–æ–ø—Ä–æ–±—É–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞. 
–ü–æ–º–Ω–∏—Ç–µ, —á–µ–º —Ç–æ—á–Ω–µ–µ –≤—ã –µ–π –æ–ø–∏—à–∏—Ç–µ —Å—é–∂–µ—Ç —Ñ–∏–ª—å–º–∞, —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç. 
- –ø–æ–∏—Å–∫ –ø–æ –∫–æ–º–∞–Ω–¥–µ ¬´/find –Ω–∞–∑–≤–∞–Ω–∏–µ¬ª
- –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å —É—Ç–æ—á–Ω–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã ¬´–Ω–∞–π—Ç–∏¬ª, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Ö–æ–∂–∏–µ –ø–æ —Å–º—ã—Å–ª—É —Å–ª–æ–≤–∞, –≥–ª–∞–≤–Ω–æ–µ, —á—Ç–æ–±—ã –Ω–µ–π—Ä–æ—Å–µ—Ç—å –ø–æ–Ω–∏–º–∞–ª–∞.
- –Ω–∞–∂–∞—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ ¬´–ù–∞–π—Ç–∏¬ª, –ø–æ—Å–ª–µ —á–µ–≥–æ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞, –º–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å —á—Ç–æ —É–≥–æ–¥–Ω–æ, –∫–æ–≥–¥–∞ –Ω–∞–¥–æ–µ—Å—Ç –Ω–∞–∂–∞—Ç—å ¬´–°—Ç–æ–ø¬ª
- –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, —Å–µ—Ä–∏–∞–ª–∞, –º—É–ª—å—Ç–∏–∫–∞ –∏ —Ç–¥. –ù–µ–π—Ä–æ—Å–µ—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç –∫–æ–º–∞–Ω–¥—É –Ω–∞–π—Ç–∏.
- –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–µ –∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–¥–æ –∑–∞–π—Ç–∏ –≤–æ –≤–∫–ª–∞–¥–∫—É ¬´–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å¬ª, –Ω–∞–∂–∞—Ç—å ¬´–ü–æ–∫–∞–∑–∞—Ç—å¬ª –∏ –≤—ã–±—Ä–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç. –í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω —Å–ø–∏—Å–æ–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É.

<b>–ü—Ä–æ—Å–º–æ—Ç—Ä</b>:
–í–æ–∑–º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–≥–æ, –Ω–∞–¥–æ –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –æ—Ç–º–µ—Ç–∏—Ç—å, –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π. –ï—Å–ª–∏ —Ä–∞–Ω–µ–µ –∫–æ–Ω—Ç–µ–Ω—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ–∫–Ω–æ ¬´–ù–∞ –ø–æ—Ç–æ–º¬ª, —Ç–æ –º–æ–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å, –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π, —Ç–∞–º.
–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã –∏ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∫–∏–Ω–æ –≤–ª–∏—è—é—Ç –Ω–∞ –ª—é–±–∏–º—ã–π –∂–∞–Ω—Ä—ã –∏ –ª–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.

<b>–ù–∞ –ø–æ—Ç–æ–º</b>
–í–æ–∑–º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–∑–¥–Ω–µ–µ, –Ω–∞–¥–æ –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –æ—Ç–º–µ—Ç–∏—Ç—å, –∫–∞–∫ ¬´–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∂–µ¬ª. 

<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>
–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É, –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –ª—é–±–∏–º—ã–µ –∂–∞–Ω—Ä—ã, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –∏ —Ç.–¥.

<b>–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å</b>
–î–æ–±–∞–≤–ª—è–π—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –≤–∫–ª–∞–¥–∫—É ¬´–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å¬ª. –í–∞–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –∞ –≤—Å—é –æ—Å—Ç–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—ã, –º—ã —Å–¥–µ–ª–∞–µ–º –∑–∞ –≤–∞—Å. (–æ—Ç—Å–ª–µ–¥–∏–º –≤—ã—Ö–æ–¥ –Ω–æ–≤—ã—Ö —Ñ–∏–ª—å–º–æ–≤ —Å–µ—Ä–∏–∏, –≤—ã—Ö–æ–¥ –Ω–æ–≤—ã—Ö —Å–µ–∑–æ–Ω–æ–≤, –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞ —Å–µ—Ä–∏–∞–ª–∞ –∏ —Ç.–¥.)

<b>–ü–æ–¥–±–æ—Ä–∫–∏</b>
–í–∫–ª–∞–¥–∫–∞ —Å –ø–æ–¥–±–æ—Ä–∫–∞–º–∏ –ø–æ –≤–∞—à–∏–º –ª—é–±–∏–º—ã–º –∂–∞–Ω—Ä–∞–º –∏ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–¥–±–æ—Ä–∫–∏. –í –∫–∞–∂–¥–æ–π –ø–æ–¥–±–æ—Ä–∫–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è —Å–ø–∏—Å–æ–∫ —Å —Ñ–∏–ª—å–º–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å ¬´–Ω–∞ –ø–æ—Ç–æ–º¬ª –∏–ª–∏ –æ—Ç–º–µ—Ç–∏—Ç—å, –∫–∞–∫ —É–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π, –∏ –≤—ã—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É.
–ê –µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ, —á—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –∫–æ–≤—ã—Ä—è—Ç—å—Å—è –≤ –ø–æ–¥–±–æ—Ä–∫–∞—Ö, —Ç–æ –º–æ–∂–µ—Ç–µ –¥–æ–≤–µ—Ä–∏—Ç—å—Å—è —Å—É–¥—å–±–µ –∏ –≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –≤–∫–ª–∞–¥–∫–∏ ¬´–°–ª—É—á–∞–π–Ω—ã–π¬ª. 

''', parse_mode='HTML')
    elif message.text.startswith("/find"):

        parts = message.text.split(' ')

        if len(parts) >= 2 and parts[0] == "/find":
            name = ' '.join(parts[1:])

            if name and any(c.isalnum() for c in name):
                print("–ù–∞–π–¥–µ–Ω–Ω–æ–µ –∏–º—è:", name)
            else:
                name = None
                print("–ü–æ—Å–ª–µ /find –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –±—É–∫–≤–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º null")
        else:
            name = None
            print("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /find –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∏–∫–∞–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ /find")

        if(name):
            # bot.send_message(user_id, f"–í–æ—Ç –≤–∞—à–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞: {name}", parse_mode='HTML')
            movies = search_movies(name)
            send_movies_results(bot, user_id, movies, '–Ω–∞–π–¥–∏', name)
            return

        bot.send_message(user_id, "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –£—Ç–æ—á–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏. –í–∞–º –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∏–Ω–æ–∫–∞—Ä—Ç–∏–Ω—ã —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. üé•üîç", parse_mode='HTML')
    else:
        # Display the selected genre
        
        genre_to_id = {genre["genre"]: genre["id"] for genre in genres_array}

        selected_genre = message.text.lower()  # Convert to lowercase for case-insensitivity

        if selected_genre in genre_to_id:

            bot.send_message(user_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∂–∞–Ω—Ä: {message.text}")
            
            # Display the selected id
            selected_id = genre_to_id[selected_genre]
            bot.send_message(user_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∂–∞–Ω—Ä —Å id: {selected_id}")

            # The API endpoint
            url = 'https://kinopoiskapiunofficial.tech/api/v2.2/films'

            # Parameters for the request
            params = {
                'genres': selected_id,
                'order': 'RATING',
                'type': 'ALL',
                'ratingFrom': 0,
                'ratingTo': 10,
                'yearFrom': 1000,
                'yearTo': 3000,
                'page': random.randint(1, 5)
            }

            # The API key header
            headers = {
                'accept': 'application/json',
                'X-API-KEY': '6ea49ced-083a-4c2a-b622-9137ca531bd6'
            }

            # Sending the GET request
            response = requests.get(url, params=params, headers=headers)

            # Checking the response
            if response.status_code == 200:
                # Do something with the response.json() data
                data = response.json()
                
                # Extracting film details
                films = data.get('items', [])

                # Creating a formatted string for each film
                film_strings = []
                for index, film in enumerate(films, start=1):
                    film_id = film.get('kinopoiskId', '')
                    film_name = film.get('nameRu', '')
                    film_url = f"https://www.kinopoisk.ru/film/{film_id}/"

                    # Creating the formatted string
                    film_string = f"{index}) {film_name}, <a href='{film_url}'>–°—Å—ã–ª–∫–∞</a>"
    
                    # Appending to the list
                    film_strings.append(film_string)

                # Joining the strings with newline characters
                result_string = '\n'.join(film_strings)

                # Sending the message
                bot.send_message(user_id, f"–ö–æ–Ω—Ç–µ–Ω—Ç –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã–π –ø–æ –∂–∞–Ω—Ä—É <b>{selected_genre}</b>: \n{result_string}", disable_web_page_preview=True, parse_mode='HTML')
            else:
                # Handle the error
                print(f"Error: {response.status_code}")
                print(response.text)
        else:
            bot.send_message(user_id, f"üé• –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–≥–Ω–æ–≤–µ–Ω–∏–π, –ø–æ–∫–∞ –Ω–∞—à –Ω–µ–π—Ä–æ–ø–æ–º–æ—à–Ω–∏–∫ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ –æ–Ω–ª–∞–π–Ω –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä—ã, —á—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è –≤–∞—Å –Ω–∞–∏–ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç... üçø‚ú®")
            text = message.text
            # command, content = extract_command_and_content(text)

            response_gpt = g4f.ChatCompletion.create(
                model=g4f.models.gpt_35_turbo,
                messages=[{
                    "role": "user",
                    "content": '''
–ò–º–µ—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã: –Ω–∞–π–¥–∏, –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å, –ø–æ–¥—Å–∫–∞–∂–∏ –∏ –Ω–µ_–Ω–∞–π–¥–µ–Ω–æ. 

–î–∞–ª–µ–µ –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç–µ–±–µ –Ω–∞–¥–æ –≤—ã–¥–µ–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏–∑ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã—Ö –≤—ã—à–µ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º –ø–æ –ª–æ–≥–∏–∫–µ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, –µ—Å–ª–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ñ–∏–ª—å–º–∞ –∏–º–µ—é—Ç—Å—è –æ—à–∏–±–∫–∏ –≤ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏, —Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Ö –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å. 

–ï—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∫–æ–º–∞–Ω–¥—ã, –Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–º–µ—Ä–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∏–Ω–æ–∫–∞—Ä—Ç–∏–Ω—ã, —Ç–æ–≥–¥–∞ –ø–æ–¥—Å—Ç–∞–≤–ª—è–π –∫–æ–º–∞–Ω–¥—É –Ω–∞–π—Ç–∏.

–ï—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∏–Ω–æ–∫–∞—Ä—Ç–∏–Ω—ã, —Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ", –∞ –ø–æ–ª–µ film –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π.

–ï—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–º–µ–µ—Ç—Å—è —É–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –ø–æ–º–æ—â—å –≤ –ø–æ–∏—Å–∫–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä –ø–æ–º–æ–≥–∏ –∏–ª–∏ –Ω–∞–ø–æ–º–Ω–∏, —Ç–æ–≥–¥–∞ –Ω–∞–¥–æ –≤–µ—Ä–Ω—É—Ç—å –∫–æ–º–∞–Ω–¥—É ¬´–ø–æ–¥—Å–∫–∞–∂–∏¬ª, –∞ –ø–æ–ª–µ film –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –ø–æ–¥—Å–∫–∞–∑–∫—É –æ—Ç —Ç–µ–±—è, —á—Ç–æ —ç—Ç–æ –∑–∞ –∫–∞—Ä—Ç–∏–Ω–∞.

–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ json —Å –ø–æ–ª—è–º–∏: command –∏ film. –î–∞–Ω–Ω—ã–µ –±–µ–∑ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ json, —Ç–æ–ª—å–∫–æ —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç. 

–¢–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: ''' + text
                }]
            )

            # response_gpt = response_gpt.replace('json', '')

            print(response_gpt)

            if is_valid_json(response_gpt):
                data = json.loads(response_gpt)

                command, content = data['command'], data['film']

                if command and content:
                    user['last_command'] = command
                    user['last_content'] = content
                    users_collection.update_one({'user_id': user_id}, {'$set': user})

                    if command == '–ø–æ–¥—Å–∫–∞–∂–∏':
                        bot.send_message(user_id, f"–í–æ—Ç —á—Ç–æ –¥—É–º–∞–µ—à—å –Ω–∞—à –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç:\n\n<b>{content}</b>", parse_mode='HTML')
                        return

                    markup = types.InlineKeyboardMarkup()
                    markup.add(types.InlineKeyboardButton("–í–µ—Ä–Ω–æ", callback_data="correct"),
                            types.InlineKeyboardButton("–ù–µ–≤–µ—Ä–Ω–æ", callback_data="incorrect"))

                    response_message = f"üåü –ù–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ —É—á–∏—Ç—Å—è –≤—Å—ë –≤—Ä–µ–º—è, –∏ –≤–∞—à–∞ –ø–æ–º–æ—â—å –ø—Ä–æ—Å—Ç–æ –Ω–µ–æ—Ü–µ–Ω–∏–º–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –Ω–∞–¥–æ: \n\n<b>–í—ã –ø–æ–ø—Ä–æ—Å–∏–ª–∏:</b> {command}\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∏–Ω–æ–∫–∞—Ä—Ç–∏–Ω—ã:</b> {content}\n\n–í—Å–µ –≤–µ—Ä–Ω–æ?"
                    bot.send_message(user_id, response_message, parse_mode='HTML', reply_markup=markup)
                else:
                    bot.send_message(user_id, f"–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã.\n\n–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∞—à –±–æ—Ç —Ç–æ–ª—å–∫–æ —É—á–∏—Ç—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –∫–æ–º–∞–Ω–¥—ã, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è, –ø–æ—Å—Ç–∞–≤—å—Ç–µ –∑–Ω–∞–∫–∏ –ø—Ä–∏–ø–µ–Ω–∞–Ω–∏—è, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –∏ —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –Ω–∞–ª–∏—á–∏–∏ –∫–æ–º–∞–Ω–¥—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", parse_mode='HTML')
                    return
            else:
                bot.send_message(user_id, "üòä –û–π, –≤—ã –∑–∞–±—ã–ª–∏ —É–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!üîç")


@bot.message_handler(content_types=['voice'])
def voice_handler(message):
    user_id = message.from_user.id
    user = users_collection.find_one({'user_id': user_id})

    file_id = message.voice.file_id
    file = bot.get_file(file_id)

    file_size = file.file_size
    if int(file_size) >= 715000:
        bot.send_message(message.chat.id, 'Upload file size is too large.')
    else:
        download_file = bot.download_file(file.file_path)
        with open('audio.ogg', 'wb') as file:
            file.write(download_file)

        bot.send_message(user_id, f"üé• –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–≥–Ω–æ–≤–µ–Ω–∏–π, –ø–æ–∫–∞ –Ω–∞—à –Ω–µ–π—Ä–æ–ø–æ–º–æ—à–Ω–∏–∫ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ –æ–Ω–ª–∞–π–Ω –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä—ã, —á—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è –≤–∞—Å –Ω–∞–∏–ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç... üçø‚ú®")
        text = voice_recognizer(user['language'])

        response_gpt = g4f.ChatCompletion.create(
            model=g4f.models.gpt_35_turbo,
            messages=[{
                "role": "user",
                "content": '''
–ò–º–µ—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã: –Ω–∞–π–¥–∏, –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å, –ø–æ–¥—Å–∫–∞–∂–∏ –∏ –Ω–µ_–Ω–∞–π–¥–µ–Ω–æ. 

–î–∞–ª–µ–µ –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç–µ–±–µ –Ω–∞–¥–æ –≤—ã–¥–µ–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏–∑ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã—Ö –≤—ã—à–µ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º –ø–æ –ª–æ–≥–∏–∫–µ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, –µ—Å–ª–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ñ–∏–ª—å–º–∞ –∏–º–µ—é—Ç—Å—è –æ—à–∏–±–∫–∏ –≤ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏, —Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Ö –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å. 

–ï—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∫–æ–º–∞–Ω–¥—ã, –Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–º–µ—Ä–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∏–Ω–æ–∫–∞—Ä—Ç–∏–Ω—ã, —Ç–æ–≥–¥–∞ –ø–æ–¥—Å—Ç–∞–≤–ª—è–π –∫–æ–º–∞–Ω–¥—É –Ω–∞–π—Ç–∏.

–ï—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∏–Ω–æ–∫–∞—Ä—Ç–∏–Ω—ã, —Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ", –∞ –ø–æ–ª–µ film –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π.

–ï—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–º–µ–µ—Ç—Å—è —É–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –ø–æ–º–æ—â—å –≤ –ø–æ–∏—Å–∫–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä –ø–æ–º–æ–≥–∏ –∏–ª–∏ –Ω–∞–ø–æ–º–Ω–∏, —Ç–æ–≥–¥–∞ –Ω–∞–¥–æ –≤–µ—Ä–Ω—É—Ç—å –∫–æ–º–∞–Ω–¥—É ¬´–ø–æ–¥—Å–∫–∞–∂–∏¬ª, –∞ –ø–æ–ª–µ film –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –ø–æ–¥—Å–∫–∞–∑–∫—É –æ—Ç —Ç–µ–±—è, —á—Ç–æ —ç—Ç–æ –∑–∞ –∫–∞—Ä—Ç–∏–Ω–∞.

–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ json —Å –ø–æ–ª—è–º–∏: command –∏ film. –î–∞–Ω–Ω—ã–µ –±–µ–∑ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ json, —Ç–æ–ª—å–∫–æ —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç. 

–¢–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: ''' + text
            }]
        )

        print(response_gpt)

        if is_valid_json(response_gpt):
            data = json.loads(response_gpt)
            command, content = data['command'], data['film']
            if command and content:
                user['last_command'] = command
                user['last_content'] = content
                users_collection.update_one({'user_id': user_id}, {'$set': user})
                if command == '–ø–æ–¥—Å–∫–∞–∂–∏':
                    bot.send_message(user_id, f"–í–æ—Ç —á—Ç–æ –¥—É–º–∞–µ—à—å –Ω–∞—à –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç:\n\n<b>{content}</b>", parse_mode='HTML')
                    return
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("–í–µ—Ä–Ω–æ", callback_data="correct"),
                        types.InlineKeyboardButton("–ù–µ–≤–µ—Ä–Ω–æ", callback_data="incorrect"))
                response_message = f"üåü –ù–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ —É—á–∏—Ç—Å—è –≤—Å—ë –≤—Ä–µ–º—è, –∏ –≤–∞—à–∞ –ø–æ–º–æ—â—å –ø—Ä–æ—Å—Ç–æ –Ω–µ–æ—Ü–µ–Ω–∏–º–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –Ω–∞–¥–æ: \n\n<b>–í—ã –ø–æ–ø—Ä–æ—Å–∏–ª–∏:</b>{command}\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∏–Ω–æ–∫–∞—Ä—Ç–∏–Ω—ã:</b> {content}\n\n–í—Å–µ –≤–µ—Ä–Ω–æ?"
                bot.send_message(user_id, response_message, parse_mode='HTML', reply_markup=markup)
            else:
                bot.send_message(user_id, f"–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã.\n\n–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∞—à –±–æ—Ç —Ç–æ–ª—å–∫–æ —É—á–∏—Ç—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –∫–æ–º–∞–Ω–¥—ã, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å–≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è, –ø–æ—Å—Ç–∞–≤—å—Ç–µ –∑–Ω–∞–∫–∏ –ø—Ä–∏–ø–µ–Ω–∞–Ω–∏—è, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –∏ —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –Ω–∞–ª–∏—á–∏–∏ –∫–æ–º–∞–Ω–¥—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", parse_mode='HTML')
                return
        else:
            bot.send_message(user_id, "üòä –û–π, –≤—ã –∑–∞–±—ã–ª–∏ —É–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!üîç")

@bot.callback_query_handler(func=lambda call: call.data in ["correct", "incorrect"])
def transcription_callback_handler(call):
    user_id = call.from_user.id
    user = users_collection.find_one({'user_id': user_id})

    # Check if the user was waiting for confirmation
    if 'last_command' in user and 'last_content' in user:
        if call.data == "correct":
            command = user['last_command']
            content = user['last_content']

            if command == "–Ω–∞–π–¥–∏":
                movies = search_movies(content)
                send_movies_results(bot, user_id, movies, command, content)
            elif command == '–æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å':
                if 'finding' not in user:
                    user['finding'] = []

                if content not in user['finding']:
                    user['finding'].append(content)
                    users_collection.update_one({'user_id': user_id}, {'$set': user})

                    bot.send_message(user_id, f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{content}' –Ω–∞—á–∞–ª–æ—Å—å. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –º—ã –ø–æ–ª—É—á–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–º—É –≤–∞—Å –∫–æ–Ω—Ç–µ–Ω—Ç—É - –º—ã —Å—Ä–∞–∑—É –∂–µ –≤–∞—Å –æ–ø–æ–≤–µ—Å—Ç–∏–º.\n\n–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –ø—Ä–∏:\nüîò–ü–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª—å–º–∞\nüîò–í—ã—Ö–æ–¥ –Ω–æ–≤–æ–π —Å–µ—Ä–∏–∏ —Å–µ—Ä–∏–∞–ª–∞\nüîò–ü–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞ –∏ —Ç.–¥.\n\n–ù–æ –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —Ç–æ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–π—Ç–∏ –≤–æ –≤–∫–ª–∞–¥–∫—É <b>üï∞Ô∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å</b> –∏ –≤—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –∑–∞–ø—Ä–æ—Å", parse_mode='HTML')
                else:
                    bot.send_message(user_id, f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{content}' –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞—á–∞—Ç–æ, —Ç–∞–∫ –∫–∞–∫ –∑–∞–ø—Ä–æ—Å —Å –ø–æ–¥–æ–±–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º —É–∂–µ –∏–º–µ–µ—Ç—Å—è.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∫–ª–∞–¥–∫—É <b>üï∞Ô∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å</b>", parse_mode='HTML')
            else:
                bot.send_message(user_id, f"–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –µ—â–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –º–∞ –∏–∑—É—á–∏–º –≤–æ–∑–Ω–∏–∫—à—É—é –ø—Ä–æ–±–ª–µ–º—É –∏ —Ä–∞–∑–±–µ—Ä–µ–º—Å—è —Å –Ω–µ–π", parse_mode='HTML')

        elif call.data == "incorrect":
            bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∞—à –±–æ—Ç —Ç–æ–ª—å–∫–æ —É—á–∏—Ç—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –∫–æ–º–∞–Ω–¥—ã, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è, –ø–æ—Å—Ç–∞–≤—å—Ç–µ –∑–Ω–∞–∫–∏ –ø—Ä–∏–ø–µ–Ω–∞–Ω–∏—è, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –∏ —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –Ω–∞–ª–∏—á–∏–∏ –∫–æ–º–∞–Ω–¥—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        
        # Clear the last command and content
        users_collection.update_one({'user_id': user_id}, {'$unset': {'last_command': '', 'last_content': ''}})
    else:
        bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å.")

def add_punctuation_russian(text):
    if not text:
        return ""

    model_name = "arshad-bert-base-uncased-sentence"
    tokenizer = AutoTokenizer.from_pretrained(model_name)
    model = AutoModelForTokenClassification.from_pretrained(model_name)

    inputs = tokenizer(text, return_tensors="pt")
    outputs = model(**inputs)
    predictions = torch.argmax(outputs.logits, dim=2)

    restored_text = ""
    for token, pred_label in zip(tokenizer.convert_ids_to_tokens(inputs["input_ids"][0]), predictions[0]):
        if token.startswith("##"):
            restored_text = restored_text.rstrip() + token[2:]
        else:
            if pred_label == 1:
                restored_text = restored_text.rstrip() + token + " "
            else:
                restored_text += token + " "

    return restored_text.strip()

def voice_recognizer(language):
    subprocess.run(['ffmpeg', '-i', 'audio.ogg', 'audio.wav', '-y'])
    text = 'Words not recognized.'
    file = sr.AudioFile('audio.wav')
    with file as source:
        try:
            audio = r.record(source)
            text = r.recognize_google(audio, language=language)
            text = add_punctuation_russian(text)
        except:
            logger.error(f"Exception:\n {traceback.format_exc()}")

    return text

def search_movies(query):
    base_url = f'https://api.kinopoisk.dev/v1.4/movie/search?page=1&limit=10&query={query}'
    api_key = '8W83T87-DV244BK-PEE7PXK-6PS64WX'
    headers = {
        'accept': 'application/json',
        'X-API-KEY': api_key
    }
    response = requests.get(base_url, headers=headers)
    movies = []
    # print(response.json())
    if response.status_code == 200:
        movies_data = response.json()
        items = movies_data.get('docs', [])
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ nameRu –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª—å–º–∞
        filtered_movies = [{'name': movie.get('name'), 'id': movie.get('id')} for movie in items if (movie.get('type') == 'movie' or movie.get('type') == 'animated-series' or movie.get('type') == 'cartoon' or movie.get('type') == 'tv-series')]

        return filtered_movies
    else:
        print(f"Error: {response.status_code}")
        return []
    
    
    

def send_movies_results(bot, user_id, movies, command, content, isInfinite=False):
    if not movies:
        bot.send_message(user_id, "üîç–û–π! –ü–æ—Ö–æ–∂–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞.ü§î")
        return

    user = users_collection.find_one({'user_id': user_id})
    user['movies'] = movies
    user['total_pages'] = (len(movies) + 4) // 5
    user['current_page'] = 1
    users_collection.update_one({'user_id': user_id}, {'$set': user})

    send_movies_page(bot, user_id, movies, user['current_page'], user['total_pages'], isInfinite)


def send_movies_page(bot, user_id, movies, current_page, total_pages, isInfinite=False):
    print('send_movies_page function')
    user = users_collection.find_one({'user_id': user_id})
    start_index = (current_page - 1) * 5
    end_index = min(current_page * 5, len(movies))
    page_movies = movies[start_index:end_index]

    buttons = []
    for idx, movie in enumerate(page_movies):
        button_text = movie['name']
        callback_data = f"movie:{movie['id']}"
        buttons.append([types.InlineKeyboardButton(button_text, callback_data=callback_data)])

    navigation_buttons = []
    if current_page == total_pages and total_pages > 1:
        navigation_buttons.append([types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="prev_page")])
    if current_page == 1 and total_pages > 1:
        navigation_buttons.append([types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data="next_page")])
    if current_page > 1 and current_page < total_pages:
        navigation_buttons.append([types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="prev_page"), types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data="next_page")])

    inline_keyboard = buttons + navigation_buttons
    keyboard = types.InlineKeyboardMarkup(inline_keyboard)

    message_text = u"\nüïµ<b>–í–æ—Ç —á—Ç–æ –Ω–∞–º —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.</b>"
    if(isInfinite):
        message_text = u"–ï—Å–ª–∏ –≤–∞—à–µ–≥–æ —Ñ–∏–ª—å–º–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞, –∏ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ –ø–æ—Ö–æ–∂–µ–µ –¥–ª—è –≤–∞—Å! –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ <b>—Å—Ç–æ–ø</b> –∏–ª–∏ <b>stop</b>"
    message_text += f"\n\n\nüìñ<b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page} –∏–∑ {total_pages}</b>"
        

    sent_message = bot.send_message(user_id, message_text, parse_mode='HTML', reply_markup=keyboard)

    if(isInfinite):
        bot.register_next_step_handler(sent_message, find_conent)


def get_movie_details(movie_id):
    base_url = f'https://kinopoiskapiunofficial.tech/api/v2.2/films/{movie_id}'
    api_key = '6ea49ced-083a-4c2a-b622-9137ca531bd6'

    deep_info_url = f'https://api.kinopoisk.dev/v1.4/movie/{movie_id}'
    kino_dev = '8W83T87-DV244BK-PEE7PXK-6PS64WX'

    headers = {
        'accept': 'application/json',
        'X-API-KEY': api_key
    }

    headers_deep = {
        'accept': 'application/json',
        'X-API-KEY': kino_dev
    }

    response = requests.get(base_url, headers=headers)
    response_watch = requests.get(deep_info_url, headers=headers_deep)

    if response.status_code == 200 and response_watch.status_code == 200:
        film = response.json()

        print(film)

        genres = [genre["genre"] for genre in film['genres']]
        filmUrl = film['webUrl']

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –±–æ—Ç–∞
        message = f"<b>{film['nameRu'] if film['nameRu'] else film['nameOriginal']}</b>\n"
        # message += f"\n<b>üìÖ –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞:</b> {film['year']} - {film['endYear']}"
        if film['ratingImdb'] and film['ratingImdbVoteCount']: message += f"\n<b>‚≠ê –û—Ü–µ–Ω–∫–∞:</b> {film['ratingImdb']}[–æ—Ü–µ–Ω–∏–ª–∏ {'{:,.0f}'.format(int(film['ratingImdbVoteCount']))}]"
        message += f"\n<b>üìÖ –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞:</b> {film['year']}"
        if film.get("serial"):
            if film["completed"] and film['endYear'] != film['year']:
                message += f" - {film['endYear']}"
            if not film["completed"]: 
                message += f" - –Ω.–≤."
                
        message += f"\n<b>üé≠ –ñ–∞–Ω—Ä—ã:</b> {', '.join(genres)}"
        
        message += f"\n<b>üëÄ –ì–¥–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:</b>"
        # message += f"–ö–∏–Ω–æ–ø–æ–∏—Å–∫: <a href='{film['webUrl']}'>—Å–º–æ—Ç—Ä–µ—Ç—å</a>\n"
        watch = response_watch.json()
        items_watch = watch["watchability"]["items"]
        if len(items_watch) != 0:
            for item in items_watch:
                message += f"\n ‚àô {item['name']}: <a href='{item['url']}'>—Å–º–æ—Ç—Ä–µ—Ç—å</a>"
        else:
            if(watch['ticketsOnSale']): 
                message += f"\n<b>‚öì‚ö†Ô∏è –î–∞–Ω–Ω—ã–π —Ñ–∏–ª—å–º –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ª—å–∫–æ –≤ –∫–∏–Ω–æ.‚ö†Ô∏è‚öì</b>\n"
            else: 
                message += f"\n<b>‚öì‚ö†Ô∏è –î–∞–Ω–Ω—ã–π —Ñ–∏–ª—å–º –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–∏—Ä–∞—Ç—Å–∫–∏—Ö –∫–∏–Ω–æ–ø–ª–æ—â–∞–¥–∫–∞—Ö.‚ö†Ô∏è‚öì</b>\n"

        
        

        if(film["serial"]):
            message += f"\n<b>‚è≥ –°—Ç–∞—Ç—É—Å: "
            if(film["completed"]):
                message += f"–≤—Å–µ —Å–µ–∑–æ–Ω—ã –≤—ã–ø—É—â–µ–Ω—ã –≤ –ø–æ–ª–Ω–æ–º –æ–±—ä–µ–º–µ, –æ–¥–Ω–∞–∫–æ —Å–µ—Ä–∏–∞–ª –≤ –±—É–¥—É—é—â–µ–º –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–¥–æ–ª–¥–∂–µ–Ω</b>"
            else:
                message += f"–Ω–µ –≤—Å–µ —Å–µ–∑–æ–Ω—ã –≤—ã–ø—É—â–µ–Ω—ã –≤ –ø–æ–ª–Ω–æ–º –æ–±—ä–µ–º–µ, —É—Ç–æ—á–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –≤—ã—Ö–æ–¥–∞ —Å–µ—Ä–∏–π –º–æ–∂–Ω–æ –≤ –æ–Ω–ª–∞–π–Ω –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–µ</b>"

            serial_episode = f'https://api.kinopoisk.dev/v1.4/season?page=1&limit=10&selectFields=episodes&notNullFields=episodesCount&movieId={movie_id}'


            response_episodes = requests.get(serial_episode, headers=headers_deep)
            # if response_episodes.status_code == 200:
            #     episodes = response_episodes.json()
            #     print(episodes)
            #     message += f"\n<b>üìñ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∑–æ–Ω–æ–≤:</b> {episodes['total']}"

        else:
            if film['filmLength']: message += f"\n<b>‚è≥ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∏–ª—å–º–∞:</b> {format_duration(film['filmLength'])}"
        
        if film['description']: message += f"\n\n<b>üìÑ –û–ø–∏—Å–∞–Ω–∏–µ:</b> {film['description'][:120]}..."

        movie_name = film['nameRu'] if film['nameRu'] else film['nameOriginal']

        # –ü–æ–ª—É—á–µ–Ω–∏–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        # photo_url = film.get('posterUrl') or film.get('posterUrlPreview')
        photo_url = watch['poster']['previewUrl']
        return message, photo_url, movie_name, genres, filmUrl
    else:
        print(f"Error: {response.status_code}")
        return None
    
@bot.callback_query_handler(func=lambda call: call.data in ["by_rating", "favourite_genre"] or call.data.startswith("collection&") or call.data.startswith("genre_list&") )
def collection_handler(call):
    user_id = call.from_user.id
    user = users_collection.find_one({'user_id': user_id})

    if call.data == "favourite_genre":
        watched_movies = None
        if 'watched' in user:
            watched_movies = user.get('watched', [])
        else: 
            bot.send_message(user_id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ø–∞—Å—Ç—å —Å—é–¥–∞, —Ç–∞–∫ –∫–∞–∫ –æ –≤–∞—Å –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
            return

        all_genres = None
        if 'genres' in user:
            all_genres = [genre for movie in watched_movies for genre in movie.get('genres', [])]
        else: 
            bot.send_message(user_id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ø–∞—Å—Ç—å —Å—é–¥–∞, —Ç–∞–∫ –∫–∞–∫ –æ –≤–∞—Å –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
            return
        

        genre_counts = {}
        for genre in all_genres:
            genre_counts[genre] = genre_counts.get(genre, 0) + 1

        unique_genres = sorted(set(all_genres), key=lambda x: genre_counts[x], reverse=True)
        first_genre = unique_genres[0]

        genre_to_id = {genre["genre"]: genre["id"] for genre in genres_array}

        selected_genre = first_genre.lower()
        navigation_buttons = []
        
        selected_id = genre_to_id[selected_genre]
        url = 'https://kinopoiskapiunofficial.tech/api/v2.2/films'
        params = {
            'genres': selected_id,
            'order': 'RATING',
            'type': 'ALL',
            'ratingFrom': 0,
            'ratingTo': 10,
            'yearFrom': 1000,
            'yearTo': 3000,
            'page': random.randint(1, 5)
        }
        headers = {
            'accept': 'application/json',
            'X-API-KEY': '6ea49ced-083a-4c2a-b622-9137ca531bd6'
        }
        response = requests.get(url, params=params, headers=headers)
        if response.status_code == 200:
            data = response.json()
            
            films = data.get('items', [])
            for index, film in enumerate(films, start=1):
                film_id = film.get('kinopoiskId', '')
                film_name = film.get('nameRu', '')
                film_url = f"https://www.kinopoisk.ru/film/{film_id}/"
                navigation_buttons.append(
                    [
                        types.InlineKeyboardButton(film_name, url=film_url),
                    ]
                )
            
        inline_keyboard = navigation_buttons
        keyboard = types.InlineKeyboardMarkup(inline_keyboard)

        bot.send_message(user_id, f"üçøüé¨ –ü–æ–¥–±–æ—Ä–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –≤–∞—à–µ–º—É —Å–∞–º–æ–º—É –ø–æ–ø—É–ª—è—Ä–Ω–æ–º—É –∂–∞–Ω—Ä—É: <b>{first_genre}</b>.\n\n–í—Å–µ —Ñ–∏–ª—å–º—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ä–µ–π—Ç–∏–Ω–≥–∞ –Ω–∞ –∫–∏–Ω–æ–ø–æ–∏—Å–∫–µ.‚ú®", parse_mode='HTML', reply_markup=keyboard)

    elif call.data == "by_rating":
        watched_movies = None
        if 'watched' in user:
            watched_movies = user.get('watched', [])
        else: 
            bot.send_message(user_id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ø–∞—Å—Ç—å —Å—é–¥–∞, —Ç–∞–∫ –∫–∞–∫ –æ –≤–∞—Å –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
            return

        all_genres = None
        if 'genres' in user:
            all_genres = [genre for movie in watched_movies for genre in movie.get('genres', [])]
        else: 
            bot.send_message(user_id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ø–∞—Å—Ç—å —Å—é–¥–∞, —Ç–∞–∫ –∫–∞–∫ –æ –≤–∞—Å –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
            return

        genre_counts = {}
        for genre in all_genres:
            genre_counts[genre] = genre_counts.get(genre, 0) + 1

        unique_genres = sorted(set(all_genres), key=lambda x: genre_counts[x], reverse=True)
        first_genre = unique_genres[1]

        genre_to_id = {genre["genre"]: genre["id"] for genre in genres_array}

        selected_genre = first_genre.lower()
        navigation_buttons = []
        
        selected_id = genre_to_id[selected_genre]
        url = 'https://kinopoiskapiunofficial.tech/api/v2.2/films'
        params = {
            'genres': selected_id,
            'order': 'RATING',
            'type': 'ALL',
            'ratingFrom': 0,
            'ratingTo': 10,
            'yearFrom': 1000,
            'yearTo': 3000,
            'page': random.randint(1, 5)
        }
        headers = {
            'accept': 'application/json',
            'X-API-KEY': '6ea49ced-083a-4c2a-b622-9137ca531bd6'
        }
        response = requests.get(url, params=params, headers=headers)
        if response.status_code == 200:
            data = response.json()
            
            films = data.get('items', [])
            for index, film in enumerate(films, start=1):
                film_id = film.get('kinopoiskId', '')
                film_name = film.get('nameRu', '')
                film_url = f"https://www.kinopoisk.ru/film/{film_id}/"
                navigation_buttons.append(
                    [
                        types.InlineKeyboardButton(film_name, url=film_url),
                    ]
                )
            
        inline_keyboard = navigation_buttons
        keyboard = types.InlineKeyboardMarkup(inline_keyboard)

        bot.send_message(user_id, f"üçøüé¨ –ü–æ–¥–±–æ—Ä–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –≤–∞—à–∏–º –æ—Ç–∑—ã–≤–∞–º.\n\n–í—Å–µ —Ñ–∏–ª—å–º—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ä–µ–π—Ç–∏–Ω–≥–∞ –Ω–∞ –∫–∏–Ω–æ–ø–æ–∏—Å–∫–µ.‚ú®", parse_mode='HTML', reply_markup=keyboard)
    elif call.data.startswith("collection&"):
        category = call.data.split("&")[1] #new_year, love, brutal

        base_url = f'https://api.kinopoisk.dev/v1.4/movie?page=1&limit=10&lists={category}'
        api_key = '8W83T87-DV244BK-PEE7PXK-6PS64WX'

        headers = {
            'accept': 'application/json',
            'X-API-KEY': api_key
        }

        response = requests.get(base_url, headers=headers)
        movies = []

        print(response.json())

        if response.status_code == 200:
            movies_data = response.json()
            items = movies_data.get('docs', [])

            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ nameRu –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª—å–º–∞
            filtered_movies = [{'name': movie.get('name'), 'id': movie.get('id')} for movie in items if (movie.get('type') == 'movie' or movie.get('type') == 'animated-series' or movie.get('type') == 'cartoon' or movie.get('type') == 'tv-series')]

            movies = filtered_movies
        else:
            print(f"Error: {response.status_code}")
            movies = []

        send_movies_results(bot, user_id, movies, '–Ω–∞–π–¥–∏', '')
    elif call.data.startswith("genre_list&"):
        genre = call.data.split("&")[1]

        base_url = f'https://api.kinopoisk.dev/v1.4/movie?page=1&limit=10&selectFields=id&selectFields=name&selectFields=type&notNullFields=rating.imdb&type=&genres.name={genre}'
        api_key = '8W83T87-DV244BK-PEE7PXK-6PS64WX'

        headers = {
            'accept': 'application/json',
            'X-API-KEY': api_key
        }

        response = requests.get(base_url, headers=headers)
        movies = []

        if response.status_code == 200:
            movies_data = response.json()
            items = movies_data.get('docs', [])

            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ nameRu –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª—å–º–∞
            filtered_movies = [{'name': movie.get('name'), 'id': movie.get('id')} for movie in items if (movie.get('type') == 'movie' or movie.get('type') == 'animated-series' or movie.get('type') == 'cartoon' or movie.get('type') == 'tv-series')]

            movies = filtered_movies
        else:
            print(f"Error: {response.status_code}")
            movies = []

        send_movies_results(bot, user_id, movies, '–Ω–∞–π–¥–∏', '')



        
        


@bot.callback_query_handler(func=lambda call: call.data.startswith("movie:") or call.data.startswith("watched:") or call.data.startswith("watch_later:") or call.data.startswith("unwatch_later:") or call.data.startswith("unwatched:") or call.data.startswith("setRating:") or call.data.startswith("editRating:") or call.data.startswith("rating:") or call.data.startswith("find:") or call.data in ["prev_page", "next_page", "return_to_list"])
def movies_callback_handler(call):
    user_id = call.from_user.id
    user = users_collection.find_one({'user_id': user_id})

    if call.data == "prev_page":
        user['current_page'] = max(1, user.get('current_page', 1) - 1)
    elif call.data == "next_page":
        user['current_page'] = min(user.get('total_pages', 1), user.get('current_page', 1) + 1)
    elif call.data.startswith("movie:"):
        movie_id = int(call.data.split(":")[1])
        movie_details, photo_url, movie_name, genres, firmUrl = get_movie_details(movie_id)

        # print(movie_details)

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        markup = types.InlineKeyboardMarkup()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —Ñ–∏–ª—å–º –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ
        is_watched = any(movie.get('id') == movie_id for movie in user.get('watched', []))

        if is_watched:
            markup.add(types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö", callback_data=f"unwatched:{movie_id}"))
        else:
            markup.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ", callback_data=f"watched:{movie_id}"))

        rating_object = next((item for item in user.get('rating', []) if item['id'] == movie_id), None)

        if not rating_object:
            markup.add(types.InlineKeyboardButton("–ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É", callback_data=f"setRating:{movie_id}"))
        else:
            markup.add(types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É", callback_data=f"editRating:{movie_id}"))

        later_object = next((item for item in user.get('later', []) if item['id'] == movie_id), None)

        if not later_object:
            markup.add(types.InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∂–µ", callback_data=f"watch_later:{movie_id}"))
        else:
            markup.add(types.InlineKeyboardButton("–£–±—Ä–∞—Ç—å –∏–∑ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∂–µ", callback_data=f"unwatch_later:{movie_id}"))
        markup.add(types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É", callback_data="return_to_list"))


        message = bot.send_photo(user_id, photo_url, caption=movie_details, parse_mode='HTML', reply_markup=markup)
        user['last_message_id'] = message.message_id
    elif call.data.startswith("find:"):
        print('find controller')

        text = call.data.split(":")[1]

        movies = search_movies(text)
        send_movies_results(bot, user_id, movies, '–Ω–∞–π–¥–∏', text)

        return

    elif call.data.startswith("watched:"):
        print('watched')

        # –ò–∑–≤–ª–µ–∫–∞–µ–º id —Ñ–∏–ª—å–º–∞ –∏–∑ callback_data
        watched_movie_id = int(call.data.split(":")[1])

        if True:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç —Ñ–∏–ª—å–º —É–∂–µ –≤ –º–∞—Å—Å–∏–≤–µ user['watched']
            if 'watched' not in user:
                user['watched'] = []

            movie_details, photo_url, movie_name, genres, firmUrl = get_movie_details(watched_movie_id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∏–ª—å–º –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–∞—Å—Å–∏–≤ user['watched']
            if watched_movie_id not in [movie['id'] for movie in user['watched']]:
                

                print(movie_name)
                
                current_date = datetime.now().strftime("%d.%m.%Y")
                watched_movie = {'name': movie_name, 'id': watched_movie_id}
                watched_movie['date_added'] = current_date
                watched_movie['genres'] = genres

                user['watched'].append(watched_movie)
                users_collection.update_one({'user_id': user_id}, {'$set': user})

                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö", callback_data=f"unwatched:{watched_movie_id}{':without' if len(call.data.split(':')) > 2 else ''}"))

                if(len(call.data.split(":")) == 2): 
                    rating_object = next((item for item in user.get('rating', []) if item['id'] == watched_movie_id), None)
                    if not rating_object:
                        markup.add(types.InlineKeyboardButton("–ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É", callback_data=f"setRating:{watched_movie_id}"))
                    else:
                        markup.add(types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É", callback_data=f"editRating:{watched_movie_id}"))
                
                
                later_object = next((item for item in user.get('later', []) if item['id'] == watched_movie_id), None)

                if not later_object:
                    markup.add(types.InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∂–µ", callback_data=f"watch_later:{watched_movie_id}{':without' if len(call.data.split(':')) > 2 else ''}"))
                else:
                    markup.add(types.InlineKeyboardButton("–£–±—Ä–∞—Ç—å –∏–∑ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∂–µ", callback_data=f"unwatch_later:{watched_movie_id}{':without' if len(call.data.split(':')) > 2 else ''}"))
                
                if(len(call.data.split(":")) == 2): markup.add(types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É", callback_data="return_to_list"))

                bot.edit_message_reply_markup(chat_id=user_id, message_id=user['last_message_id'], reply_markup=markup)

                bot.send_message(user_id, f"–§–∏–ª—å–º '{watched_movie['name']}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ ({current_date}).")
                
            else:
                bot.send_message(user_id, f"–§–∏–ª—å–º '{movie_name}' —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö.")
        else:
            bot.send_message(user_id, "–§–∏–ª—å–º –∏–ª–∏ —Å–µ—Ä–∏–∞–ª –≤–æ–∑–º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è! üîÑüé¨")
    elif call.data.startswith('watch_later:'):
        movie_id = int(call.data.split(":")[1])

        # print(call.data)

        # later_movie = {}
        # later_movie = next((movie for movie in user.get('movies', []) if movie.get('id') == movie_id), None)

        # print(later_movie)

        if True:
            if 'later' not in user:
                user['later'] = []

            movie_details, photo_url, movie_name, genres, firmUrl = get_movie_details(movie_id)

            if movie_id not in [movie['id'] for movie in user['later']]:
                current_date = datetime.now().strftime("%d.%m.%Y")
                later_movie = {'name': movie_name, 'id': movie_id}
                later_movie['date_added'] = current_date
                later_movie['genres'] = genres


                user['later'].append(later_movie)
                users_collection.update_one({'user_id': user_id}, {'$set': user})

                markup = types.InlineKeyboardMarkup()
                is_watched = any(movie.get('id') == movie_id for movie in user.get('watched', []))

                if is_watched:
                    markup.add(types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö", callback_data=f"unwatched:{movie_id}{':without' if len(call.data.split(':')) > 2 else ''}"))
                else:
                    markup.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ", callback_data=f"watched:{movie_id}{':without' if len(call.data.split(':')) > 2 else ''}"))

                if(len(call.data.split(":")) == 2): 
                    rating_object = next((item for item in user.get('rating', []) if item['id'] == movie_id), None)

                    if not rating_object:
                        markup.add(types.InlineKeyboardButton("–ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É", callback_data=f"setRating:{movie_id}"))
                    else:
                        markup.add(types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É", callback_data=f"editRating:{movie_id}"))

                markup.add(types.InlineKeyboardButton("–£–±—Ä–∞—Ç—å –∏–∑ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∂–µ", callback_data=f"unwatch_later:{movie_id}{':without' if len(call.data.split(':')) > 2 else ''}"))
                if(len(call.data.split(":")) == 2):  markup.add(types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É", callback_data="return_to_list"))
                

                bot.edit_message_reply_markup(chat_id=user_id, message_id=user['last_message_id'], reply_markup=markup)

                bot.send_message(user_id, f"–§–∏–ª—å–º '{later_movie['name']}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–æ–∑–∂–µ.")
                
            else:
                bot.send_message(user_id, f"–§–∏–ª—å–º '{later_movie['name']}' —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–æ–∑–∂–µ.")

    elif call.data.startswith('unwatch_later:'):
        movie_id = int(call.data.split(":")[1])

        watched_movie = {}

        watched_movie = next((movie for movie in user.get('movies', []) if movie.get('id') == movie_id), None)

        if watched_movie is None:
            watched_movie = next((movie for movie in user.get('later', []) if movie.get('id') == movie_id), None)

        user['later'] = [movie for movie in user.get('later', []) if movie.get('id') != movie_id]
        users_collection.update_one({'user_id': user_id}, {'$set': user})

        markup = types.InlineKeyboardMarkup()
        is_watched = any(movie.get('id') == movie_id for movie in user.get('watched', []))

        if is_watched:
            markup.add(types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö", callback_data=f"unwatched:{movie_id}{':without' if len(call.data.split(':')) > 2 else ''}"))
        else:
            markup.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ", callback_data=f"watched:{movie_id}{':without' if len(call.data.split(':')) > 2 else ''}"))
        
        if(len(call.data.split(":")) == 2):
            rating_object = next((item for item in user.get('rating', []) if item['id'] == movie_id), None)
            if not rating_object:
                markup.add(types.InlineKeyboardButton("–ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É", callback_data=f"setRating:{movie_id}"))
            else:
                markup.add(types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É", callback_data=f"editRating:{movie_id}"))
        markup.add(types.InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∂–µ", callback_data=f"watch_later:{movie_id}{':without' if len(call.data.split(':')) > 2 else ''}"))
        
        if(len(call.data.split(":")) == 2): markup.add(types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É", callback_data="return_to_list"))
                
        bot.edit_message_reply_markup(chat_id=user_id, message_id=user['last_message_id'], reply_markup=markup)


        bot.send_message(user_id, f"–§–∏–ª—å–º '{watched_movie['name']}' —É–¥–∞–ª–µ–Ω –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö.")

    elif call.data.startswith("unwatched:"):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º id —Ñ–∏–ª—å–º–∞ –∏–∑ callback_data
        movie_id = int(call.data.split(":")[1])

        watched_movie = {}

        watched_movie = next((movie for movie in user.get('watched', []) if movie.get('id') == movie_id), None)

        if watched_movie is None:
            watched_movie = next((movie for movie in user.get('watched', []) if movie.get('id') == movie_id), None)

        user['watched'] = [movie for movie in user.get('watched', []) if movie.get('id') != movie_id]
        users_collection.update_one({'user_id': user_id}, {'$set': user})

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ", callback_data=f"watched:{movie_id}{':without' if len(call.data.split(':')) > 2 else ''}"))
        if(len(call.data.split(":")) == 2): 
            rating_object = next((item for item in user.get('rating', []) if item['id'] == movie_id), None)
            if not rating_object:
                markup.add(types.InlineKeyboardButton("–ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É", callback_data=f"setRating:{movie_id}"))
            else:
                markup.add(types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É", callback_data=f"editRating:{movie_id}"))
        
        later_object = next((item for item in user.get('later', []) if item['id'] == movie_id), None)

        if not later_object:
            markup.add(types.InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∂–µ", callback_data=f"watch_later:{movie_id}{':without' if len(call.data.split(':')) > 2 else ''}"))
        else:
            markup.add(types.InlineKeyboardButton("–£–±—Ä–∞—Ç—å –∏–∑ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∂–µ", callback_data=f"unwatch_later:{movie_id}{':without' if len(call.data.split(':')) > 2 else ''}"))
        
        if(len(call.data.split(":")) == 2): markup.add(types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É", callback_data="return_to_list"))
                
        bot.edit_message_reply_markup(chat_id=user_id, message_id=user['last_message_id'], reply_markup=markup)


        bot.send_message(user_id, f"–§–∏–ª—å–º '{watched_movie['name']}' —É–¥–∞–ª–µ–Ω –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö.")
    elif call.data.startswith("setRating:"):
        movie_id = call.data.split(":")[1]

        print(movie_id)

        inline_keyboard = [
            [
                types.InlineKeyboardButton("1", callback_data=f"rating:{movie_id}&1&set"),
                types.InlineKeyboardButton("2", callback_data=f"rating:{movie_id}&2&set"),
                types.InlineKeyboardButton("3", callback_data=f"rating:{movie_id}&3&set"),
                types.InlineKeyboardButton("4", callback_data=f"rating:{movie_id}&4&set"),
                types.InlineKeyboardButton("5", callback_data=f"rating:{movie_id}&5&set"),
            ],
            [
                types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f"rating:-1&1&set"),
            ]
        ]
        markup = types.InlineKeyboardMarkup(inline_keyboard)
        rating_message = bot.send_message(user_id, f"–í—ã–±–µ—Ä–µ—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –æ—Ü–µ–Ω–∫—É –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.", reply_markup=markup)

        user['rating_message_id'] = rating_message.message_id
    elif call.data.startswith("editRating:"):
        movie_id = int(call.data.split(":")[1])

        rating_object = next((item for item in user.get('rating', []) if item['id'] == movie_id), None)
        
        print(rating_object)

        rating_number = rating_object['value']

        inline_keyboard = [
            [
                types.InlineKeyboardButton(f"‚úÖ 1" if rating_number == 1 else "1", callback_data=f"rating:{movie_id}&1&edit"),
                types.InlineKeyboardButton(f"‚úÖ 2" if rating_number == 2 else "2", callback_data=f"rating:{movie_id}&2&edit"),
                types.InlineKeyboardButton(f"‚úÖ 3" if rating_number == 3 else "3", callback_data=f"rating:{movie_id}&3&edit"),
                types.InlineKeyboardButton(f"‚úÖ 4" if rating_number == 4 else "4", callback_data=f"rating:{movie_id}&4&edit"),
                types.InlineKeyboardButton(f"‚úÖ 5" if rating_number == 5 else "5", callback_data=f"rating:{movie_id}&5&edit"),
            ],
            [
                types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f"rating:-1&1&edit"),
            ]
        ]
        markup = types.InlineKeyboardMarkup(inline_keyboard)
        rating_message = bot.send_message(user_id, f"–í—ã–±–µ—Ä–µ—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –æ—Ü–µ–Ω–∫—É –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.", reply_markup=markup)

        user['rating_message_id'] = rating_message.message_id
        # user['last_message_id'] = rating_message.message_id

    elif call.data.startswith("rating:"):
        dataPart = call.data.split(":")[1].split("&")
        movie_id = int(dataPart[0])
        rating_value = int(dataPart[1])
        mode_type = dataPart[2]

        if(movie_id == -1):
            bot.delete_message(chat_id=user_id, message_id=user['rating_message_id'])
            user['rating_message_id'] = ''

            return

        if mode_type == 'set':
            if 'rating' not in user:
                user['rating'] = []

            rating_object = next((item for item in user.get('rating', []) if item['id'] == movie_id), None)

            if not rating_object:
                rating_obj = {}

                rating_obj['id'] = movie_id
                rating_obj['value'] = rating_value

                user['rating'].append(rating_obj)

                bot.delete_message(chat_id=user_id, message_id=user['rating_message_id'])
                bot.send_message(user_id, f"–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –±—ã–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, —ç—Ç–æ –ø–æ–≤–ª–∏—è–µ—Ç—Å—è –Ω–∞ –≤–∞—à–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.")


                markup = types.InlineKeyboardMarkup()
                is_watched = any(movie.get('id') == movie_id for movie in user.get('watched', []))

                if is_watched:
                    markup.add(types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö", callback_data=f"unwatched:{movie_id}"))
                else:
                    markup.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ", callback_data=f"watched:{movie_id}"))

                markup.add(types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É", callback_data=f"editRating:{movie_id}"))
                later_object = next((item for item in user.get('later', []) if item['id'] == movie_id), None)

                if not later_object:
                    markup.add(types.InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∂–µ", callback_data=f"watch_later:{movie_id}"))
                else:
                    markup.add(types.InlineKeyboardButton("–£–±—Ä–∞—Ç—å –∏–∑ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∂–µ", callback_data=f"unwatch_later:{movie_id}"))
                markup.add(types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É", callback_data="return_to_list"))
                        
                bot.edit_message_reply_markup(chat_id=user_id, message_id=user['last_message_id'], reply_markup=markup)
            else:
                bot.send_message(user_id, f"–£ –≤–∞—Å —É–∂–µ –∏–º–µ–µ—Ç—Å—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π —Ñ–∏–ª—å–º, –æ–±–Ω–æ–≤–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤ '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ'")
        else:
            rating_object = next((item for item in user.get('rating', []) if item['id'] == movie_id), None)
            rating_object['value'] = rating_value

            bot.delete_message(chat_id=user_id, message_id=user['rating_message_id'])
            bot.send_message(user_id, f"–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –±—ã–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, —ç—Ç–æ –ø–æ–≤–ª–∏—è–µ—Ç—Å—è –Ω–∞ –≤–∞—à–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.")
    
        user['rating_message_id'] = ''
    
    if(call.data == 'return_to_list' and 'isWatched' in user and user['isWatched'] == True):
        bot.delete_message(chat_id=user_id, message_id=user['last_message_id'])
        user['last_message_id'] = ''
        user['isWatched'] = ''
        return

    if (not(call.data.startswith("movie:")) and not(call.data.startswith("watched:")) and not(call.data.startswith("watch_later:")) and not(call.data.startswith("unwatch_later:")) and not(call.data.startswith("unwatched:")) and not(call.data.startswith("setRating:")) and not(call.data.startswith("editRating:")) and not(call.data.startswith("rating:")) and not(call.data.startswith("find:"))):
        send_movies_page(bot, user_id, user['movies'], user['current_page'], user['total_pages'])
        # bot.delete_message(chat_id=user_id, message_id=user['last_message_id'])
        user['last_message_id'] = ''

    users_collection.update_one({'user_id': user_id}, {'$set': user})


if __name__ == '__main__':
    logger.info('start bot')
    bot.polling(True)
    logger.info('stop bot')


